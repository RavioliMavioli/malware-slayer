class_name Bullet extends Sprite2D

@export var DAMAGE: int
@export var SPEED: int
@export var LIFETIME:float
@export var collision_shape: CollisionShape2D
@export var notifier: VisibleOnScreenNotifier2D

var collision_mask_1 = 0b0001 # Bit 1
var collision_mask_2 = 0b0010  # Bit 2
var timer: Timer = Timer.new()
var already_exploded: bool = true
var query: PhysicsShapeQueryParameters2D = PhysicsShapeQueryParameters2D.new()

func _ready():
	timer.one_shot = true
	timer.autostart = false
	timer.wait_time = LIFETIME
	add_child(timer)
	
	query.set_shape(collision_shape.shape)
	query.collide_with_bodies = true
	query.collide_with_areas = true
	query.collision_mask = collision_mask_1 #| collision_mask_2
	
	hide()
	set_physics_process(false)

func _physics_process(delta):
	
	bullet_behaviour(delta)
		
	query.transform = global_transform
	var results: Array = get_world_2d().direct_space_state.intersect_shape(query, 1)
	for result in results:
		var entity = result["collider"]
		if entity.has_method("get_shot"):
			entity.get_shot(global_position, DAMAGE)
		explode()

func _spawn():
	if already_exploded:
		timer.timeout.connect(lifetime_timeout)
		notifier.screen_exited.connect(screen_exited)
		notifier.screen_exited.connect(screen_entered)
		already_exploded = false

	timer.start()	
	show()
	set_physics_process(true)

func bullet_behaviour(delta): # Can be overwritted
	var distance = SPEED*delta
	var motion = transform.x * distance
	position += motion
	

func explode():
	already_exploded = true
	timer.timeout.disconnect(lifetime_timeout)
	notifier.screen_exited.disconnect(screen_exited)
	notifier.screen_exited.disconnect(screen_entered)
	timer.stop()
	
	hide()
	set_physics_process(false)

func lifetime_timeout():
	explode()

func screen_exited():
	hide()

func screen_entered():
	show()
