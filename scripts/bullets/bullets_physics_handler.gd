class_name Bullet extends Sprite2D

@export var post_collision: PackedScene
var speed: float
var health_change: HealthComponent.ChangePackage
var lifetime: float = 2

var timer: SceneTreeTimer
var query := PhysicsPointQueryParameters2D.new()

func bullet_behaviour(delta): # Can be overwritten
	var distance = speed*delta
	var motion = transform.x * distance
	position += motion

func _ready():
	query.collide_with_bodies = true
	query.collide_with_areas = true

	_set_collision_mask([1,5])
	
	_deactivate()

func _physics_process(delta):
	bullet_behaviour(delta)
	query.position = global_position
	var results: Array = get_world_2d().direct_space_state.intersect_point(query, 1)
	for result in results:
		var collider :Node = result["collider"]
		if health_change != null:
			var health := collider.get_node_or_null("%HealthComponent") as HealthComponent
			if health != null:
				health.apply(health_change)
		if collider.has_signal("hit"):
			collider.emit_signal("hit", self)
		explode()

func _pool_claim():
	timer = get_tree().create_timer(lifetime)
	timer.timeout.connect(_lifetime_timeout)
	show()
	set_physics_process(true)

func _pool_unclaim():
	timer.disconnect("timeout", _lifetime_timeout)
	timer = null
	_deactivate()
	


func _deactivate():
	hide()
	set_physics_process(false)

func _set_collision_mask(num: Array[int]):
	var num_bit: int = 0
	for n in num:
		num_bit += pow(2, n-1) as int # From godot multiple layer collision documentation
	query.collision_mask = num_bit

func _lifetime_timeout():
	explode()

func explode():
	ObjectPoolService.unclaim(self)
	var post_collision_node = post_collision.instantiate()
	post_collision_node.global_position = global_position
	Levels.temp_effects.add_child(post_collision_node)
