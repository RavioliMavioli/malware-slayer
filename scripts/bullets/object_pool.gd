class_name ObjectPool extends RefCounted
# This class is quite generic and might be useful for objects other than bullets
# so it's probably a good idea to move it to some folder with generic classes

var current_size:int = 0
var auto_resize := true

var template:PackedScene
var node_parent:Node

var array := []
var free_array := []

static func get_object_pool_from_object(obj:Node)-> ObjectPool:
	return obj.get_meta("object_pool")

func _init(_template:PackedScene):
	template = _template

func resize(newSize:int):
	if newSize > current_size:
		array.resize(newSize)
		for i in range(current_size, newSize):
			_create_new_instance(i)
	elif newSize < current_size:
		for i in range(newSize, current_size):
			_destroy_instance(i)
		array.resize(newSize)
	current_size = newSize

func is_claimed(obj:Node)-> bool:
	return obj.get_meta("claimed_from_pool") == true

func claim_new()-> Node:
	if free_array.is_empty():
		# just doubling the size is generally good practice
		if auto_resize:
			resize(maxi(current_size, 10)*2)
		else:
			return null
	var obj := free_array.pop_back() as Node
	obj.set_meta("claimed_from_pool", true)
	if obj.has_method("_pool_claim"):
		obj.call("_pool_claim")
	return obj

func unclaim(obj:Node):
	assert(obj.get_meta("object_pool") == self, "Object does not belong to this pool")
	assert(is_claimed(obj), "Object has not been claimed")
	obj.set_meta("claimed_from_pool", false)
	free_array.push_back(obj)
	if obj.has_method("_pool_unclaim"):
		obj.call("_pool_unclaim")

func clear():
	for obj in array:
		_destroy_instance(obj)
	array.clear()
	free_array.clear()
	current_size = 0

# private functions
# as godot has no concept of privacy, i like to mark private stuff with an underscore
# so it's obvious that it was not intended for external usage

func _create_new_instance(ind:int)-> Node:
	var obj := template.instantiate()
	if node_parent != null:
		node_parent.add_child(obj)
	obj.set_meta("object_pool", self)
	obj.set_meta("claimed_from_pool", true)
	array[ind] = obj
	unclaim(obj)
	return obj

func _destroy_instance(ind:int):
	var obj :Node = array[ind]
	obj.queue_free()
