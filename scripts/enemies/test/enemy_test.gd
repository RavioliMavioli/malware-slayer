class_name Enemy extends RigidBody2D

@export var blood_scene: PackedScene

const SPEED = 5000
const JUMP = -500
const CAMERA_SHAKE_STRENGTH := VFX.camera_shake.STRENGTH.LONG_STRONG

var sprite:AnimatedSprite2D:
	get: return $Sprite
var collider:CollisionShape2D:
	get: return$Collision
var health:HealthComponent:
	get: return %HealthComponent
var hitbox: Area2D:
	get: return %HitboxComponent
var drop: DropablesComponent:
	get: return %DropablesComponent
var front: Area2D:
	get: return $Front
var ground: Area2D:
	get: return $Ground
var sfx: SFXPlayer:
	get: return $SFXPlayer

var cam_shake:= VFX.camera_shake.new()
var previous_pos: Vector2
var delta_player_position: Vector2

func _ready():
	sprite.visible = true
	health.died.connect(_died)
	cam_shake.shaker.shake_finished.connect(_finished)
	
func _physics_process(delta):
	modulate = lerp(modulate, Color(1.0, 1.0, 1.0), delta*8)
	global_position = global_position
	global_rotation = 0.0
	enemy_behaviour(delta)

func enemy_behaviour(delta):
	delta_player_position = Player.player_node.global_position - global_position
	sprite.play("idle")

	var direction = sign(delta_player_position.x)
	if front.has_overlapping_bodies():
		if ground.has_overlapping_bodies():
			linear_velocity.y = -600
		return
	if abs(delta_player_position.x) >= 10.0:
		linear_velocity.x = direction * SPEED * delta
		
	$Sprite.flip_h = true if delta_player_position.x < 0 else false

func _died():
	drop.drop()
	EntityManager.mark_as_unsaveable(self)
	modulate = Color(1,1,1)
	$AnimationPlayer.play("dead")
	set_physics_process(false)
	freeze = true
	sprite.visible = false
	$Dead.start()
	collider.disabled = true
	hitbox.call_deferred("queue_free")
	cam_shake.shake(CAMERA_SHAKE_STRENGTH)
	VFX.shockwave.spawn(VFX.shockwave.STRENGTH.WEAK, self)
	sfx.play()
	_spawn_blood()

func _spawn_blood() -> void:
	var blood: GPUParticles2D = blood_scene.instantiate()
	blood.global_position = global_position
	Levels.vfx_particle_node.add_child(blood)

func _finished() -> void:
	if sfx.is_still_playing():
		await sfx.finished
	queue_free()
