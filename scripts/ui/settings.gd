extends PanelContainer

var optionTemplate := load("res://scripts/ui/options.tscn") as PackedScene

var globalButton:Button

func _ready() -> void:
	globalButton = get_parent().get_node("%SettingsButton") as Button
	globalButton.toggled.connect(set_visible)
	%CloseButton.pressed.connect(set_visible.bind(false))
	visibility_changed.connect(_updateGlobalButtonState)
	_updateGlobalButtonState()
	
	_createOption("current_screen_resolution", Settings._screen_resolution)
	_createOption("is_fullscreen", Settings._fullscreen)
	_createOption("is_vsync", Settings._vsync)

func _updateGlobalButtonState():
	globalButton.set_pressed_no_signal(visible)

func _createOption(setting:String, optionsEnum:Dictionary):
	var control := optionTemplate.instantiate() as Control
	control.get_node("%Title").text = setting.capitalize()
	var options := control.get_node("%Options") as OptionButton
	var currentSettingValue :int = Settings.get_setting(setting)
	for key:String in optionsEnum:
		var enumVal :int = optionsEnum[key]
		options.add_item(key.capitalize(), enumVal)
		var itemIndex := options.get_item_index(enumVal)
		if currentSettingValue == itemIndex:
			options.select(itemIndex)
	options.item_selected.connect(_optionSelected.bind(options, setting))
	%OptionList.add_child(control)

func _optionSelected(index:int, options:OptionButton, setting:String):
	var enumVal := options.get_item_id(index)
	Settings.set_setting(setting, enumVal)
