class_name ArchDoubleJump extends Node2D

@export var double_jump_velocity := 500.0

@onready var ledge_controls: PlayerLedgeControls = %PlayerLedgeControls
var jump_controls: PlayerJumpControls:
	get: return %PlayerJumpControls
var player: PlayerInstance:
	get: return owner
var trail: TrailSpawner
var can_double_jump := false

func reset_jump(toggle: bool) -> void:
	can_double_jump = toggle
	if toggle:
		destroy_trail()

func destroy_trail() -> void:
	if trail != null:
		trail.destroy()

func _input(event: InputEvent) -> void:
	if Player.enable_input == Player.ENABLE_INPUT.DISABLED:
		return
	if !_double_jump_conditions():
		return
	if event.is_action_pressed("Jump"):
		_do_double_jump()
		reset_jump(false)

func _physics_process(delta: float) -> void:
	if player.is_on_floor() or ledge_controls.on_ledge:
		reset_jump(true)

func _do_double_jump() -> void:
	player.velocity.y = -double_jump_velocity
	_spawn_trail()
	_spawn_vfx()

func _double_jump_conditions() -> bool:
	if player.is_on_floor():
		return false
	if ledge_controls.on_ledge:
		return false
	if jump_controls.coyote_timer != null:
		return false
	if !can_double_jump:
		return false
	return true

func _spawn_trail() -> void:
	var curve = load("res://scripts/visual_effects/trail/curve1.tres")
	var color := Color.ROYAL_BLUE
	color.a = 0.33
	trail = TrailSpawner.new(50.0, 10.0, curve, player, color)
	trail.spawn()

func _spawn_vfx() -> void:
	pass
