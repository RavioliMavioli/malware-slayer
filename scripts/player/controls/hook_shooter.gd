extends Node2D

var player: PlayerInstance:
	get: return owner
var player_ledge_controls: PlayerLedgeControls:
	get: return player.get_node("%PlayerLedgeControls")
var player_jump_controls: PlayerJumpControls:
	get: return player.get_node("%PlayerJumpControls")
var player_double_jump_controls: ArchDoubleJump:
	get: return player.get_node("%PlayerDoubleJumpControls")
var hook_spawn: Marker2D:
	get: return player.get_node("%AimCenter")

@export var hook_template :PackedScene
@export var hook_max_length: float = 500.0
@export var hook_min_length: float= 100.0
@export var hook_speed: float = 2500.0
@export var hook_retraction_speed: float = 20_000.0
@export var hook_cooldown: float = 0.75
@export var retract_cooldown: float = 0.3
@export var vertical_velocity_tolerance: float = 0.0

@export var tension_factor: float = 40
@export var debounce_factor: float = 0.25
@export var centripedal_factor: float = 2
@export var movement_factor: float = 1.0
@export var damping: float = 0.66
@export var flat_damping :float = 80

@onready var hook: Hook

var cooldown_timer: SceneTreeTimer
var can_retract_timer: SceneTreeTimer
var previous_hook_pos: Vector2
var previous_hook_state: Hook.HOOK_STATE

func get_hook_cooldown_timeleft() -> float:
	if cooldown_timer != null:
		return cooldown_timer.time_left
	return 0.0

func _ready() -> void:
	hook = hook_template.instantiate() as Hook
	Levels.other_node.add_child(hook)

func _input(event: InputEvent) -> void:
	if event.is_action_pressed("Jump"):
		_retract_hook()
	if Player.enable_input == Player.ENABLE_INPUT.DISABLED:
		return
	if get_hook_cooldown_timeleft() != 0.0:
		return
	if event.is_action_pressed("Specials"):
		_shoot_hook()

func _physics_process(delta: float) -> void:
	if hook.hook_state == hook.HOOK_STATE.HOOKED:
		if previous_hook_state != hook.HOOK_STATE.HOOKED:
			Player.enable_input = Player.ENABLE_INPUT.DISABLED
			player_ledge_controls.toggle_ledge_detector(false)
			player_ledge_controls.release()
			player_double_jump_controls.destroy_trail()
			player_double_jump_controls.reset_jump(false)
			previous_hook_pos = hook.global_position
			_create_retract_timer()
		_move_mid_air(delta)

	if previous_hook_state == hook.HOOK_STATE.HOOKED and hook.hook_state != hook.HOOK_STATE.HOOKED:
		Player.enable_input = Player.ENABLE_INPUT.ENABLED
		player_ledge_controls.toggle_ledge_detector(true)
	previous_hook_state = hook.hook_state

func _shoot_hook() -> void:
	hook.speed = hook_speed
	hook.retraction_speed = hook_retraction_speed
	hook.max_length = hook_max_length
	hook.min_length = hook_min_length
	hook.shoot(hook_spawn.rotation, hook_spawn)
	_create_cooldown_timer()
	
func _retract_hook() -> void:
	if can_retract_timer != null and can_retract_timer.time_left != 0:
		return
	if hook.hook_state == hook.HOOK_STATE.HOOKED:
		hook.retract()
		if _check_if_can_jump():
			player_jump_controls.jump()
			player_double_jump_controls.reset_jump(true)
	
func _move_mid_air(delta):
	
	var running_speed := player.get_node("%PlayerMovementControls").running_speed as float
	var direction := Vector2 (Input.get_axis("Left", "Right"), Input.get_axis("Up", "Down"))
	player.velocity.x += direction.x * running_speed * movement_factor * delta
	
	hook.attached_length += 100.0 * direction.y * delta
	hook.attached_length = clamp(hook.attached_length, hook.min_length, hook.max_length)
	
	hook.rope_node.rope_length = hook.attached_length / 1.8
		
	var force := _get_force()
	player.velocity += hook.delta_tip_position.normalized() * force * delta
	var dampedVelocity := player.velocity * damping
	player.velocity -= dampedVelocity * delta
	player.velocity = player.velocity.move_toward(Vector2.ZERO, flat_damping*delta)

func _get_force() -> float:
	var hook_length := hook.delta_tip_position.length()
	var length_diff := hook_length - hook.attached_length
	if length_diff < 0:
		return 0
	var tension_force := length_diff * tension_factor
	
	var dir := hook.delta_tip_position.normalized()
	var parallel_velocity := dir.dot(player.velocity)
	var debounce_force := -parallel_velocity * debounce_factor
	debounce_force = maxf(debounce_force, 0)
	
	var perpendicular := Vector2(-dir.y, dir.x)
	var perpendicular_velocity := perpendicular.dot(player.velocity)
	
	var centripedal_force := absf(perpendicular_velocity) * centripedal_factor
	
	return tension_force + debounce_force + centripedal_force

func _check_if_can_jump():
	if player.global_position.y < previous_hook_pos.y:
		return false
	return true

func _create_cooldown_timer() -> void:
	cooldown_timer = get_tree().create_timer(hook_cooldown)
	
func _create_retract_timer() -> void:
	can_retract_timer = get_tree().create_timer(retract_cooldown)
