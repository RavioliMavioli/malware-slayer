class_name PlayerLedgeControls extends Node2D

const VERTICAL_VELOCITY_TOLERANCE := 330.0

var ledge_detector: Area2D:
	get: return %LedgeDetection
var clipping_preventer: Area2D:
	get: return %ClippingPreventer
var jump_controls: PlayerJumpControls:
	get: return %PlayerJumpControls
var player: PlayerInstance:
	get: return owner
	
var ledge_captured: Area2D
var ledge_collider_position: Vector2
var on_ledge := false
var ledge_direction := false

func release() -> void:
	on_ledge = false

func toggle_ledge_detector(toggle: bool) -> void: # for managing from external script
	ledge_detector.monitoring = toggle

func _ready() -> void:
	ledge_detector.area_entered.connect(_ledge_entered)
	ledge_collider_position = ledge_detector.get_node("LedgeDetectionR").position
	
func _input(event: InputEvent) -> void:
	if Player.enable_input == Player.ENABLE_INPUT.DISABLED:
		return
	if !on_ledge:
		return
		
	if event.is_action_pressed("Jump"):
		jump_controls.jump()
		on_ledge = false
	if event.is_action_pressed("Down"):
		on_ledge = false
	
func _physics_process(delta: float) -> void:
	if !on_ledge:
		return
	if ledge_captured == null:
		return
	
	var offset := Vector2 (	-ledge_collider_position.x if ledge_direction else ledge_collider_position.x,
							-ledge_collider_position.y)
	player.velocity = Vector2.ZERO
	player.global_position = lerp(player.global_position, ledge_captured.global_position + offset, 0.5)
	
func _ledge_entered(area: Area2D) -> void:
	if Player.enable_input == Player.ENABLE_INPUT.DISABLED:
		return
	if player.velocity.y < -VERTICAL_VELOCITY_TOLERANCE:
		return
	if clipping_preventer.has_overlapping_bodies():
		return
	var delta_ledge_pos = area.global_position.x - player.global_position.x
	on_ledge = true
	ledge_captured = area
	ledge_direction = true if delta_ledge_pos > 0 else false
