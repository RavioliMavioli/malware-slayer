class_name Hook extends StaticBody2D

@onready var links: Sprite2D = $Link
@onready var collider: CollisionShape2D = $CollisionShape2D

enum HOOK_STATE {RETRACTING, DEPLOYING, HOOKED, IDLE}
var hook_state: HOOK_STATE = HOOK_STATE.IDLE

var hook_spawn: Marker2D
var direction: Vector2
var hook_rotation : float
var delta_tip_position:Vector2
var hook_max_length: float
var speed: float
var retraction_speed: float

func shoot(_rotation: float, _hook_spawn: Node2D):
	hook_rotation = _rotation
	direction = Vector2.from_angle(hook_rotation)
	global_position = _hook_spawn.global_position
	hook_spawn = _hook_spawn
	hook_state = HOOK_STATE.DEPLOYING
	visible = true

func reset():
	hook_state = HOOK_STATE.IDLE
	visible = false

func retract():
	hook_state = HOOK_STATE.RETRACTING

func attach():
	hook_state = HOOK_STATE.HOOKED
	_spawn_particles()

func _physics_process(delta):
	if hook_state == HOOK_STATE.IDLE:
		return
	
	delta_tip_position = global_position - hook_spawn.global_position
	global_rotation = (global_position - hook_spawn.owner.global_position).angle() + PI/2
	
	if hook_state == HOOK_STATE.DEPLOYING:
		_process_deployed(delta)
	if hook_state == HOOK_STATE.RETRACTING:
		_process_retracted(delta)
	
	links.global_rotation = hook_spawn.global_position.angle_to_point(global_position) + PI/2
	links.region_rect.size.y = hook_spawn.global_position.distance_to(global_position)

func _process_deployed(delta) -> void:
	collider.disabled = false
	if delta_tip_position.length() > hook_max_length:
		retract()
		return
	if move_and_collide(direction * speed * delta):
		attach()

func _process_retracted(delta) -> void:
	collider.disabled = true
	global_position = global_position.move_toward(hook_spawn.global_position, retraction_speed * delta)
	if delta_tip_position.length() <= 50:
		reset()

func _spawn_particles():
	pass
