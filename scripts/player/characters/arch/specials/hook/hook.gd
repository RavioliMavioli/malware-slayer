class_name Hook extends StaticBody2D

@export var line_color: Color
@export var particles: PackedScene
@export var camera_shake_strength: VFX.camera_shake.STRENGTH = VFX.camera_shake.STRENGTH.SHORT_MEDIUM
@onready var links: Sprite2D = $Link
@onready var collider: CollisionShape2D = $CollisionShape2D

var line: Line2D

enum HOOK_STATE {RETRACTING, DEPLOYING, HOOKED, IDLE}
var hook_state: HOOK_STATE = HOOK_STATE.IDLE

var hook_spawn: Marker2D
var direction: Vector2
var hook_rotation : float
var delta_tip_position:Vector2
var max_length: float
var min_length: float
var length_reduction:float = 0
var speed: float
var retraction_speed: float

var attached_length:float

var rope_connecting_line: Line2D
var rope_node: Rope
var handle_node: RopeHandle
var cam_shake := VFX.camera_shake.new()

func shoot(_rotation: float, _hook_spawn: Node2D):
	var p: PackedVector2Array = [Vector2.ZERO, Vector2.ZERO]
	line = Line2D.new()
	line.width = 2
	line.points = p
	line.default_color = line_color
	Levels.other_node.add_child(line)
	
	hook_rotation = _rotation
	direction = Vector2.from_angle(hook_rotation)
	global_position = _hook_spawn.owner.global_position
	hook_spawn = _hook_spawn
	hook_state = HOOK_STATE.DEPLOYING
	visible = true

func reset():
	hook_state = HOOK_STATE.IDLE
	if line != null:
		line.queue_free()
	visible = false

func retract():
	hook_state = HOOK_STATE.RETRACTING
	if rope_node != null and handle_node != null:
		_destroy_rope()

func attach():
	attached_length = maxf(delta_tip_position.length() - length_reduction, min_length)
	hook_state = HOOK_STATE.HOOKED
	_spawn_rope()
	_spawn_particles()
	_shake_camera()

func _ready() -> void:
	hide()

func _physics_process(delta):
	if hook_state == HOOK_STATE.IDLE:
		return
	
	delta_tip_position = global_position - hook_spawn.owner.global_position
	
	if hook_state == HOOK_STATE.DEPLOYING:
		_process_deploying(delta)
	if hook_state == HOOK_STATE.RETRACTING:
		_process_retracting(delta)
	
	if line != null:
		line.points[0] = global_position
		line.points[1] = hook_spawn.owner.global_position

	delta_tip_position = global_position - hook_spawn.owner.global_position
	global_rotation = hook_spawn.owner.global_position.angle_to_point(global_position) + PI/2
	
	links.global_rotation = delta_tip_position.angle() + PI/2
	links.region_rect.size.y = delta_tip_position.length()
	
	if rope_node != null and handle_node != null:
		rope_node.global_position = global_position
		handle_node.global_position = hook_spawn.owner.global_position
	if rope_connecting_line != null:
		rope_connecting_line.points[0] = hook_spawn.owner.global_position
		rope_connecting_line.points[1] = rope_node.get_point(rope_node.get_num_points() - 1)

func _process_deploying(delta) -> void:
	collider.disabled = false
	if delta_tip_position.length() > max_length:
		retract()
		return
	var obj = move_and_collide(direction * speed * delta)
	if obj:
		if obj.get_collider().name.contains("iw"):
			retract()
			return
		attach()

func _process_retracting(delta) -> void:
	collider.disabled = true
	global_position = global_position.move_toward(hook_spawn.owner.global_position, retraction_speed * delta)
	if delta_tip_position.length() <= 50:
		reset()

func _spawn_rope() -> void:
	line.queue_free()
	_rope()

func _spawn_particles() -> void:
	var p = particles.instantiate()
	p.global_position = global_position
	Levels.vfx_particle_node.add_child(p)

func _shake_camera() -> void:
	cam_shake.shake(camera_shake_strength)

func _rope() -> void:
	_init_connecting_line()
	_init_rope()
	_init_handle()
	
func _init_rope() -> void:
	rope_node = Rope.new()
	rope_node.color = line_color
	rope_node.global_position = global_position
	rope_node.global_rotation = -delta_tip_position.angle()
	rope_node.num_segments = 10
	rope_node.num_constraint_iterations = 10
	rope_node.rope_length = attached_length / 1.8
	rope_node.damping = 0.0
	rope_node.gravity = 100
	Levels.other_node.add_child(rope_node)

func _init_handle() -> void:
	handle_node = RopeHandle.new()
	handle_node.global_position = hook_spawn.owner.global_position
	handle_node.rope_path = rope_node.get_path()
	Levels.other_node.add_child(handle_node)

func _init_connecting_line() -> void:
	var p: PackedVector2Array = [Vector2.ZERO, Vector2.ZERO]
	rope_connecting_line = Line2D.new()
	rope_connecting_line.width = 2
	rope_connecting_line.default_color = line_color
	rope_connecting_line.points = p
	Levels.other_node.add_child(rope_connecting_line)

func _destroy_rope() -> void:
	rope_node.queue_free()
	handle_node.queue_free()
	rope_connecting_line.queue_free()
