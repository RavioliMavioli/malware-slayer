class_name Hook extends Node2D

@onready var links: Sprite2D = $Link
@onready var tip: CharacterBody2D = $Tip
@onready var collider: CollisionShape2D = $Tip/CollisionShape2D

enum HOOK_STATE {RETRACTING, DEPLOYING, HOOKED, IDLE}
var hook_state: HOOK_STATE = HOOK_STATE.IDLE

var hook_spawn: Marker2D
var direction: Vector2
var hook_rotation : float
var tip_position: Vector2
var delta_tip_position:Vector2
var hook_max_length: float
var speed: float

func shoot(_rotation: float, _hook_spawn: Node2D, _speed:float, _hook_max_length:float):
	speed = _speed
	hook_rotation = _rotation
	tip_position = _hook_spawn.global_position
	hook_spawn = _hook_spawn
	hook_max_length = _hook_max_length
	hook_state = HOOK_STATE.DEPLOYING
	visible = true

func reset():
	hook_state = HOOK_STATE.IDLE

func retract():
	hook_state = HOOK_STATE.RETRACTING

func _process(delta):
	if hook_state == HOOK_STATE.IDLE:
		visible = false
		return
		
	delta_tip_position = tip.global_position - hook_spawn.global_position
	
	#tip.global_rotation = direction.angle() + PI/2
	tip.global_rotation = (tip.global_position - hook_spawn.owner.global_position).angle() + PI/2
	links.global_rotation = delta_tip_position.angle() + PI/2
	links.global_position = tip.global_position 
	links.region_rect.size.y = delta_tip_position.length()

func _physics_process(delta):
	
	if hook_state == HOOK_STATE.IDLE:
		return

	direction = Vector2.from_angle(hook_rotation)
	tip.global_position = tip_position
	
	if hook_state == HOOK_STATE.DEPLOYING:
		
		_deploy()

	if hook_state == HOOK_STATE.RETRACTING:
		_retract()
	
	tip_position = tip.global_position

func _deploy() -> void:
	collider.disabled = false
	if delta_tip_position.length() > hook_max_length:
		hook_state = HOOK_STATE.RETRACTING
	if tip.move_and_collide(direction * speed):
		hook_state = HOOK_STATE.HOOKED
		_spawn_particles()
		
func _retract() -> void:
	collider.disabled = true
	tip.velocity = - delta_tip_position.normalized() * speed * 100
	tip.move_and_slide()
	if delta_tip_position.length() <= 50:
		reset()

func _spawn_particles():
	pass
