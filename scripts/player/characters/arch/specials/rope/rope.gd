extends Node2D

@export var rope_piece: PackedScene

var rope_start: RigidBody2D:
	get: return %RopeStart
var rope_end: RigidBody2D:
	get: return %RopeEnd

var rope_close_tolerance := 4.0
var piece_length := 4.0
var rope_parts := []

func spawn_rope(start_pos: Vector2, end_pos: Vector2) -> void:
	
	rope_start.global_position = start_pos
	rope_end.global_position = end_pos
	
	start_pos = rope_start.joint.global_position
	end_pos = rope_end.joint.global_position
	
	var distance: float = start_pos.distance_to(end_pos)
	var segment_ammount: int = round(distance/piece_length)
	var spawn_angle: float = (end_pos - start_pos).angle() - PI/2
	
	_create_rope(segment_ammount, rope_start, end_pos, spawn_angle)

func _create_rope(ammount: int, parent: Object, end_pos: Vector2, spawn_angle: float) -> void:
	for i in ammount:
		parent = _add_piece(parent, i, spawn_angle)
		rope_parts.append(parent)
		
		var joint_pos = parent.joint.global_position
		if joint_pos.distance_to(end_pos) < rope_close_tolerance:
			break
	rope_end.joint.node_a = rope_end.get_path()
	rope_end.joint.node_b = rope_parts[-1].get_path()
	
func _add_piece(parent: Object, id: int, spawn_angle: float) -> RigidBody2D:
	var joint: PinJoint2D = parent.joint
	var piece: RigidBody2D = rope_piece.instantiate()
	
	piece.global_position = joint.global_position
	piece.rotation = spawn_angle
	piece.parent = self
	piece.id = id

	add_child(piece)
	joint.node_a = parent.get_path()
	joint.node_b = piece.get_path()
	
	return piece
