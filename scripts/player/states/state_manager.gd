class_name StateManager extends Node2D

var player: PlayerInstance:
	get: return owner
var sprite_node: AnimatedSprite2D:
	get: return player.character_node.get_node("AnimatedSprite2D")
var ledge_controls: PlayerLedgeControls:
	get: return player.get_node("%PlayerLedgeControls")
var movement_controls: PlayerMovementControls:
	get: return player.get_node("%PlayerMovementControls")

enum STATE {IDLE, RUN, JUMP, FALL, ON_LEDGE, HIT, DED}
enum FACING {LOOK_FORWARD, LOOK_BACKWARD}
enum HEAD {STRAIGHT, SLIGHT_UP, UP, SLIGHT_DOWN, DOWN}
enum FLIP {LEFT, RIGHT}
enum FIRE {LMB, RMB, Q, E, NULL}

var current_state: STATE
var current_facing: FACING
var current_head: HEAD
var current_flip: FLIP
var current_fire: FIRE

func _process(delta: float) -> void:
	if sprite_node == null:
		return
		
	var delta_cursor_position = player.get_global_mouse_position() - player.global_position
	# Graphical related process
	#################### Character State ########################
	#################### State ########################
	
	if player.is_on_floor():
		current_state = STATE.IDLE
		if player.velocity.x != 0:
			current_state = STATE.RUN
	else:
		current_state = STATE.JUMP
		if player.velocity.y > 0:
			current_state = STATE.FALL
			
	#################### Facing ########################
	if movement_controls.direction != 0:
		if movement_controls.direction > 0:
			current_facing = FACING.LOOK_BACKWARD
			if delta_cursor_position.x > 0:
				current_facing = FACING.LOOK_FORWARD
		else:
			current_facing = FACING.LOOK_BACKWARD
			if delta_cursor_position.x < 0:
				current_facing = FACING.LOOK_FORWARD
	elif player.is_on_floor():
		current_facing = FACING.LOOK_FORWARD
	
	#################### Head ########################
	
	var head_angle = abs(delta_cursor_position.normalized()).angle()
	var head_angle_degrees = rad_to_deg(head_angle)
	
	if delta_cursor_position.y <= 0:
		if head_angle_degrees <= 20.0:
			current_head = HEAD.STRAIGHT
		elif head_angle_degrees <= 60.0:
			current_head = HEAD.SLIGHT_UP
		elif head_angle_degrees <= 90.0:
			current_head = HEAD.UP
	else:
		if head_angle_degrees <= 20.0:
			current_head = HEAD.STRAIGHT
		elif head_angle_degrees <= 60.0:
			current_head = HEAD.SLIGHT_DOWN
		elif head_angle_degrees <= 90.0:
			current_head = HEAD.DOWN
	
	#################### Flip ########################
	
	if Terminal.current_status == Terminal.STATUS.CLOSE:
		current_flip = FLIP.LEFT
		if delta_cursor_position.x >= 0:
			current_flip = FLIP.RIGHT
		
	#################### Fire ########################
	
	current_fire = FIRE.NULL
	
	if Input.is_action_pressed("Shoot_1"):
		current_fire = FIRE.LMB

	if Input.is_action_pressed("Shoot_2"):
		current_fire = FIRE.RMB
	
	if Input.is_action_just_pressed("Specials"):
		current_fire = FIRE.E
	
	if Input.is_action_just_pressed("Ultimate"):
		current_fire = FIRE.Q
	
	#################### On Ledge ########################
	
	
	if ledge_controls.on_ledge:
		current_flip = FLIP.LEFT
		current_state = STATE.ON_LEDGE
		if ledge_controls.ledge_direction:
			current_flip = FLIP.RIGHT
			current_state = STATE.ON_LEDGE
		
	#################### Facing ########################
	sprite_node.scale.x = 1
	
	if current_flip == FLIP.LEFT:
		sprite_node.scale.x = -1
	
	
	$CharState.text = get_current_state_id()
	$CharFacing.text = get_current_facing_id()
	$CharHead.text = get_current_head_id()
	$CharFlip.text = get_current_flip_id()
	$CharFire.text = get_current_fire_id()
################################################################################## 

func get_state() -> STATE:
	return STATE
func get_facing() -> FACING:
	return FACING
func get_head() -> HEAD:
	return HEAD
func get_flip() -> FLIP:
	return FLIP
func get_fire() -> FIRE:
	return FIRE
	
##################################################################################

func get_current_state_id():
	return STATE.keys()[current_state]
func get_current_facing_id():
	return FACING.keys()[current_facing]
func get_current_head_id():
	return HEAD.keys()[current_head]
func get_current_flip_id():
	return FLIP.keys()[current_flip]
func get_current_fire_id():
	return FIRE.keys()[current_fire]

##################################################################################

func get_current_state():
	return current_state
func get_current_facing():
	return current_facing
func get_current_head():
	return current_head
func get_current_flip():
	return current_flip
func get_current_fire():
	return current_fire

