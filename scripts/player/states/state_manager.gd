class_name StateManager extends Resource

var player: PlayerClass

enum _state {IDLE, RUN, JUMP, FALL, ON_LEDGE, HIT, DED}
enum _facing {LOOK_FORWARD, LOOK_BACKWARD}
enum _head {STRAIGHT, SLIGHT_UP, UP, SLIGHT_DOWN, DOWN}
enum _flip {LEFT, RIGHT}
enum _fire {LMB, RMB, Q, E, NULL}

var current_state: int = 0
var current_facing: int = 0
var current_head: int = 0
var current_flip: int = 0
var current_fire: int = 0

func _init(_player: PlayerClass):
	player = _player
	
func process():
	# Graphical related process
	#################### Character State ########################
	#################### State ########################
	
	if player.is_on_floor():
		current_state = _state.IDLE
		if player.velocity.x != 0:
			current_state = _state.RUN
	else:
		current_state = _state.JUMP
		if player.velocity.y > 0:
			current_state = _state.FALL
			
	#################### Facing ########################
	
	if player.direction != 0:
		if player.direction > 0:
			current_facing = _facing.LOOK_BACKWARD
			if player.delta_cursor_position.x > 0:
				current_facing = _facing.LOOK_FORWARD
		else:
			current_facing = _facing.LOOK_BACKWARD
			if player.delta_cursor_position.x < 0:
				current_facing = _facing.LOOK_FORWARD
	elif player.is_on_floor():
		current_facing = _facing.LOOK_FORWARD
	
	#################### Head ########################
	
	var head_angle = abs(player.delta_cursor_position.normalized()).angle()
	var head_angle_degrees = rad_to_deg(head_angle)
	
	if player.delta_cursor_position.y <= 0:
		if head_angle_degrees <= 20.0:
			current_head = _head.STRAIGHT
		elif head_angle_degrees <= 60.0:
			current_head = _head.SLIGHT_UP
		elif head_angle_degrees <= 90.0:
			current_head = _head.UP
	else:
		if head_angle_degrees <= 20.0:
			current_head = _head.STRAIGHT
		elif head_angle_degrees <= 60.0:
			current_head = _head.SLIGHT_DOWN
		elif head_angle_degrees <= 90.0:
			current_head = _head.DOWN
	
	#################### Flip ########################
	
	if Timemode.current_time_mode == Timemode._time_mode.NORMAL:
		current_flip = _flip.LEFT
		if player.delta_cursor_position.x >= 0:
			current_flip = _flip.RIGHT
		
	#################### Fire ########################
	
	current_fire = _fire.NULL
	
	if Input.is_action_pressed("L Shoot"):
		current_fire = _fire.LMB

	if Input.is_action_pressed("R Shoot"):
		current_fire = _fire.RMB
	
	if Input.is_action_just_pressed("E"):
		current_fire = _fire.E
	
	if Input.is_action_just_pressed("Q"):
		current_fire = _fire.Q
	
	#################### On Ledge ########################
	
	var ledge_R = !player.area_ledge_R.is_empty()
	var ledge_L = !player.area_ledge_L.is_empty()
	
	if ledge_R and abs(player.velocity.y) <= 30:
		current_flip = _flip.RIGHT
		current_state = _state.ON_LEDGE
	elif ledge_L and abs(player.velocity.y) <= 30:
		current_flip = _flip.LEFT
		current_state = _state.ON_LEDGE
		
	#################### Facing ########################
	player.sprite_node.scale.x = 1
	
	if current_flip == _flip.LEFT:
		player.sprite_node.scale.x = -1
		
################################################################################## 

func get_state() -> _state:
	return _state
func get_facing() -> _facing:
	return _facing
func get_head() -> _head:
	return _head
func get_flip() -> _flip:
	return _flip
func get_fire() -> _fire:
	return _fire
	
##################################################################################

func get_current_state_id():
	return _state.keys()[current_state]
func get_current_facing_id():
	return _facing.keys()[current_facing]
func get_current_head_id():
	return _head.keys()[current_head]
func get_current_flip_id():
	return _flip.keys()[current_flip]
func get_current_fire_id():
	return _fire.keys()[current_fire]

##################################################################################

func get_current_state():
	return current_state
func get_current_facing():
	return current_facing
func get_current_head():
	return current_head
func get_current_flip():
	return current_flip
func get_current_fire():
	return current_fire

