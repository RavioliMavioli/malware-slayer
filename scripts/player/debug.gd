extends Control

@onready var timeslider: HSlider = $VBoxContainer/Timescale/HSlider
@onready var timescheck: CheckBox = $VBoxContainer/Timescale/OptionButton
@onready var timelabel: Label = $VBoxContainer/Timescale/Label
@onready var floating_node: Control = get_owner().get_node("FloatingText")

@onready var terminal_anim: Control = get_owner().get_node("PlayerFloatingText").get_node("Terminal")
@onready var player_menu_box: CheckBox = $VBoxContainer/PlayerMenu
@onready var zoom_box: CheckBox = $VBoxContainer/Zoom
@onready var free_look_box: CheckBox = $VBoxContainer/FreeLook
@onready var player_state_box: CheckBox = $VBoxContainer/PlayerState
@onready var hide_floating_box: CheckBox = $VBoxContainer/HideFloating

var mouse_is_inside = false
var init_pos
var cam_pos

func _ready():
	init_pos = global_position
	mouse_entered.connect(_mouse_entered)
	mouse_exited.connect(_mouse_exited)
	zoom_box.pressed.connect(zoom)
	player_menu_box.pressed.connect(playermenu)
	hide_floating_box.pressed.connect(floating)

func _input(event):
	freelook_input(event)
	# TODO: fix all this inputs tomfoolery
	if event.is_action_pressed("T") and Timemode.current_time_mode == Timemode._time_mode.NORMAL and !Player.player_node.is_on_floor():
		zoom_box.button_pressed = true
		player_menu_box.button_pressed = true
	if event.is_action_pressed("Pause") and Timemode.current_time_mode == Timemode._time_mode.SLOWMO:
		player_menu_box.button_pressed = false
		zoom_box.button_pressed = false

func _process(delta):
	if get_parent().get_node("Debug2").button_pressed:
		global_position = lerp(global_position, init_pos, delta * (1/Engine.time_scale) * 10)
		Player.enable_input = Player._enable_input.ENABLED
		time()
		# playermenu() is signal
		# zoom() signal
		# hd() signal
		# freelook_input() _input
		freelook_physics(delta)
		playerstate()

	else:
		global_position = lerp(global_position, global_position + Vector2(CAV.container_default_size.x -global_position.x,0), delta * (1/Engine.time_scale) * 10)
	
func time():
	timelabel.text = str(timeslider.value)
	if timescheck.button_pressed:
		Engine.time_scale = timeslider.value

func playermenu():
	if player_menu_box.button_pressed:
		terminal_anim.anim_open()
		Cursor.current_cursor_state = Cursor._cursor_state.NORMAL
	else:
		terminal_anim.anim_close()
		if !mouse_is_inside:
			Cursor.current_cursor_state = Cursor._cursor_state.AIM

func zoom():
	if zoom_box.button_pressed:
		CAV.camera_node.current_zoom_type = CAV.camera_node._zoom_type.ZOOMED
	else:
		CAV.camera_node.current_zoom_type = CAV.camera_node._zoom_type.NORMAL
		
func playerstate():
	Player.player_node.get_node("State").visible = player_state_box.button_pressed

func freelook_input(event: InputEvent):
	if free_look_box.button_pressed:
		if event is InputEventMouseMotion and Input.is_action_pressed("L Shoot"):
			CAV.camera_node.global_position -= event.relative / 2
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_WHEEL_UP:
			CAV.camera_node.zoom += Vector2(0.05, 0.05)
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			CAV.camera_node.zoom -= Vector2(0.05, 0.05)

func freelook_physics(delta):
	CAV.camera_node.set_physics_process(!free_look_box.button_pressed)
	if !free_look_box.button_pressed:
		CAV.camera_node.zoom = lerp (CAV.camera_node.zoom, Vector2.ONE, delta * 10 * (1/Engine.time_scale))

func floating():
	floating_node.visible = !hide_floating_box.button_pressed

func _mouse_entered():
	if get_parent().get_node("Debug2").button_pressed:
		Cursor.current_cursor_state = Cursor._cursor_state.NORMAL
		mouse_is_inside = true
		
func _mouse_exited():
	if !player_menu_box.button_pressed:
		Cursor.current_cursor_state = Cursor._cursor_state.AIM
		mouse_is_inside = false

