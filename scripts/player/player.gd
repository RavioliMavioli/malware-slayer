class_name PlayerClass extends CharacterBody2D

@export_category("Selected Character")
@export var characters: Player._character

const RUNNING_SPEED: float = 300
const JUMP_VELOCITY: float = 300
const DOUBLE_JUMP_VELOCITY: float = 400
const TERMINAL_VELOCITY: float = 850.0
const LEDGE_VELOCITY_TOLERANCE: float = 300

enum _enable_input {ENABLED, DISABLED}

var enable_input: _enable_input = _enable_input.ENABLED

var SPEED_devider = 4
var gravity = Gravity.gravity
var direction: int = 0
var delta_cursor_position: Vector2 = Vector2.ZERO

var was_on_floor: bool = false
var can_double_jump: bool = false
var can_coyote_jump: bool = false
var can_ledge: bool = false
var area_ledge_L: Array
var area_ledge_R: Array

@onready var state_manager: StateManager = StateManager.new(self)

@onready var sprite_node: Sprite2D = $Frame0000
@onready var ledge_detection_R: Area2D = $LedgeDetectionR
@onready var ledge_detection_L: Area2D = $LedgeDetectionL
@onready var platform_check: Area2D = $PlatformCheck
@onready var double_jump_clearance: Area2D = $DoubleJumpClearance
@onready var aim_center: Marker2D = $AimCenter
@onready var bullet_spawn: Marker2D = $AimCenter/BulletSpawn

var jump_duration: Timer = Timer.new()
var coyote_jump_timer: Timer = Timer.new()

func _ready():
	# Jump timer
	jump_duration.one_shot = true
	jump_duration.wait_time = 0.3
	add_child(jump_duration)
	# Coyote jump timer
	coyote_jump_timer.one_shot = true
	coyote_jump_timer.wait_time = 0.1
	add_child(coyote_jump_timer)
	coyote_jump_timer.timeout.connect(_on_coyote_jump_timeout)

func _input(event):
	# Pause the game
	if event.is_action_pressed("Pause"):
		pass
		
#################### _physics_process ########################

func _physics_process(delta):
	match enable_input:
		_enable_input.ENABLED:
			player_controls()
			
		_enable_input.DISABLED:
			direction = 0

	player_physics(delta)
	
#################### _process ########################

func _process(_delta):

	state_manager.state_mechine()
	
	$Label/CharState.text = state_manager.get_current_state_id()
	$Label/CharFacing.text = state_manager.get_current_facing_id()
	$Label/CharHead.text = state_manager.get_current_head_id()
	$Label/CharFlip.text = state_manager.get_current_flip_id()
	$Label/CharFire.text = state_manager.get_current_fire_id()

func player_controls():
	
	#################### Movement Control ########################
	
	direction = Input.get_axis("A", "D") as int
	
	#################### Ledge Control ########################
	
	if Input.is_action_just_pressed("S"):
		can_ledge = false
	if Input.is_action_just_pressed("Space") and (!area_ledge_L.is_empty() or !area_ledge_R.is_empty()):
		jump_duration.start()
		coyote_jump_timer.start()
		can_double_jump = true
		can_ledge = false
	if Input.is_action_pressed("Space") and (is_on_floor() or can_coyote_jump):
		# Jump as long as the jump timer still going
		jump_duration.start()
		can_coyote_jump = false
	
	#################### Jump Control ########################
	
	if Input.is_action_just_released("Space"):
		# No jump timer, jump stopped
		jump_duration.stop()
		
	#################### Double Jump Control ########################
	
	if Input.is_action_just_pressed("Space") and !is_on_floor() and can_double_jump and coyote_jump_timer.is_stopped() and !double_jump_clearance.has_overlapping_bodies():
		double_jump()
		can_double_jump = false
		
	#################### Platform Control ########################
	
	if !platform_check.get_overlapping_bodies().is_empty() and Input.is_action_just_pressed("S"):
		global_position.y += 1
	
	#################### Shooting Mechanic ########################
	
	if Input.is_action_pressed("L Shoot"):
		shoot_lmb()

	if Input.is_action_pressed("R Shoot"):
		shoot_rmb()
		
	#################### Specials ########################
	
	if Input.is_action_just_pressed("E"):
		special_e()
	
	if Input.is_action_just_pressed("Q"):
		special_q()

	#################### Ledge ########################
	

func player_physics(delta):
	if Input.is_action_pressed("1"):
		global_rotation += delta
	if Input.is_action_pressed("2"):
		global_rotation = 0
		
	area_ledge_L = ledge_detection_L.get_overlapping_areas()
	area_ledge_R = ledge_detection_R.get_overlapping_areas()
	# Cursor position from the player
	delta_cursor_position = get_global_mouse_position() - global_position
	# Get input direction, results -1, 0, 1
	
	#################### Terminal Velocity ####################
	
	velocity = Vector2(	min(abs(velocity.x), TERMINAL_VELOCITY) * sign(velocity.x) ,
						min(abs(velocity.y), TERMINAL_VELOCITY) * sign(velocity.y) )
	
	#################### Ledge Mechanic ####################
	
	if can_ledge and velocity.y >= -LEDGE_VELOCITY_TOLERANCE:
		if !area_ledge_L.is_empty() and "R" in area_ledge_L.front().name:
			velocity = Vector2.ZERO
			global_position = lerp(global_position, area_ledge_L.front().global_position - ledge_detection_L.position, 0.5)
			
		elif !area_ledge_R.is_empty() and "L" in area_ledge_R.front().name:
			velocity = Vector2.ZERO
			global_position = lerp(global_position, area_ledge_R.front().global_position - ledge_detection_R.position, 0.5)

	if area_ledge_L.is_empty() and area_ledge_R.is_empty():
		can_ledge = true

	#################### Falling ####################
	
	if !is_on_floor():
		velocity.y += gravity * delta
		
	#################### Coyote Jump ####################

	if is_on_floor():
		can_coyote_jump = true
	# Compare the current frame and previous frame if the character just left the floor
	elif was_on_floor: 
		coyote_jump_timer.start()
		
	#################### Jump ####################	

	# Jump based on the duration of the spacebar when it is pressed, called every process
	jump(jump_duration)
	
	#################### Double Jump ####################
	
	if is_on_floor():
		can_double_jump = true
	
	#################### Movement ########################
	
	# If player on the ground, the move speed is normal
		SPEED_devider = 4
	else:
		# If player on the air, the move speed is slower
		SPEED_devider = 16
	# Fast acceleration but slow deceleration
	velocity.x = move_toward(	velocity.x,
								direction * RUNNING_SPEED,
								RUNNING_SPEED/(SPEED_devider if direction else SPEED_devider * 2)	)
	
	#################### move_and_slide ########################
	
	was_on_floor = is_on_floor()
	move_and_slide()

#################### Jump Function ########################
	
func jump(jump_dur: Timer):
	var time_left = jump_dur.time_left
	if !jump_dur.is_stopped():
		velocity.y = -JUMP_VELOCITY - (time_left/jump_duration.wait_time*100)
	
func double_jump():
	velocity.y = -DOUBLE_JUMP_VELOCITY

#################### Specials ########################

func shoot_lmb():
	pass
	
func shoot_rmb():
	pass

func special_e():
	pass
	
func special_q():
	pass
		
#################### Dead ########################

#################### Etc ########################

func _on_coyote_jump_timeout():
	can_coyote_jump = false
