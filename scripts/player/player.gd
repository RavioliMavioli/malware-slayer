class_name PlayerClass extends CharacterBody2D

@export_category("Selected Character")
@export var selected_character: Player.CHARACTERS = Player.CHARACTERS.ARCH

@export_category("Character Scenes")
@export var character_scenes: Array[PackedScene]

@onready var state_manager := StateManager.new(self)
@onready var animation_manager := AnimationManager.new(self)
@onready var jump_controls := PlayerJumpControls.new(self)
@onready var ledge_controls := PlayerLedgeControls.new(self)
@onready var platform_controls := PlayerPlatformControls.new(self)
@onready var movement_controls := PlayerMovementControls.new(self)
@onready var shoot_controls := PlayerShootControls.new(self)

@onready var ledge_detection: Area2D = %LedgeDetection
@onready var ground_clearance: Area2D = %GroundClearance
@onready var platform_check: Area2D = %PlatformCheck
@onready var clipping_preventer: Area2D = %ClippingPreventer
@onready var aim_center: Marker2D = %AimCenter
@onready var bullet_spawn: Marker2D = %BulletSpawn
@onready var shoot_component: ShootComponent = %ShootComponent

const TERMINAL_VELOCITY := 850.0
## Each character should have different stats,
## so these constants below should be placed in the characters scene
const RUNNING_SPEED := 300.0
const JUMP_VELOCITY := 300.0

var gravity = ProjectSettings.get_setting("physics/2d/default_gravity")

func _ready() -> void:
	Player.player_node = self
	_init_character()
	ledge_controls.ready()
	platform_controls.ready()
	shoot_controls.ready()

func _input(event: InputEvent) -> void:
	match Player.enable_input:
		Player.ENABLE_INPUT.ENABLED:
			if event is InputEventKey:
				movement_controls.input(event)
				ledge_controls.input(event)
				jump_controls.input(event)
				platform_controls.input(event)
			if event is InputEventMouseButton:
				shoot_controls.input(event)
		Player.ENABLE_INPUT.DISABLED:
			shoot_component.unshoot()
		
func _physics_process(delta: float) -> void:
	_fall(delta)
	movement_controls.process(delta)
	ledge_controls.process(delta)
	jump_controls.process(delta)
	shoot_controls.process()
	move_and_slide()

func _process(delta: float) -> void:
	state_manager.process()
	animation_manager.process()

	$State/CharState.text = state_manager.get_current_state_id()
	$State/CharFacing.text = state_manager.get_current_facing_id()
	$State/CharHead.text = state_manager.get_current_head_id()
	$State/CharFlip.text = state_manager.get_current_flip_id()
	$State/CharFire.text = state_manager.get_current_fire_id()

### Spawn character node from character scene
func _init_character() -> void:
	var character_node := _get_character_scene().instantiate()
	self.add_child(character_node)
	# State manager and animation manager init
	state_manager.set_sprite_node(character_node.get_node("AnimatedSprite2D"))
	animation_manager.setup_animation_tree(character_node.get_node("AnimationTree"))

### Get selected character scene from an array of packed scene
func _get_character_scene() -> PackedScene:
	var selected_character_keys = Player.CHARACTERS.keys()[selected_character].capitalize()
	for character in character_scenes:
		if character != null:
			var char_name: String = character._bundled.names[0]
			if char_name == selected_character_keys:
				return character
				
	assert(false, ("Character not found: " + selected_character_keys ))
	# Defaults to first character
	return character_scenes[0]

func _fall(delta) -> void:
	if !is_on_floor():
		velocity.y += gravity * delta
