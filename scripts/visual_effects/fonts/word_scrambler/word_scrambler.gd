extends Node2D

@export var speed := 0.05
@export var autostart := true
@export var char_offset := 10
@export var cycle := 2
@export var char_additional_offset := 1

const NL_ASCII = 10 # ASCII code for "Enter / Newline"
const SPACE_ASCII = 32 # ASCII code for "Space"
const MAX_ASCII = 126 # Maximum allowed ASCII code
const MIN_ASCII = 33 # Minimum allowed ASCII code

var title:
	get: return get_parent()
	
var ascii: PackedByteArray
var init_ascii: PackedByteArray
var timer: SceneTreeTimer

func start() -> void:
	ascii = title.text.to_ascii_buffer()
	init_ascii = title.text.to_ascii_buffer()
	timer = get_tree().create_timer(speed)
	timer.timeout.connect(_timeout)
	_set_char_offset(ascii, char_offset, true)
	title.text = ascii.get_string_from_ascii()

func _ready() -> void:
	if autostart:
		start()
	
func _timeout() -> void:
	timer = get_tree().create_timer(speed)
	timer.timeout.connect(_timeout)
	for i in range(ascii.size()):
		if ascii[i] != init_ascii[i] and _check_forbidden(ascii, i):
			ascii[i] = wrapi(ascii[i] - 1, MIN_ASCII, MAX_ASCII)
	
	if ascii[0] == init_ascii[0] and cycle > 0:
		cycle -= 1
		_set_char_offset(ascii, char_offset)
	
	if ascii == init_ascii:
		timer.timeout.disconnect(_timeout)
	
	title.text = ascii.get_string_from_ascii()
	
func _set_char_offset(ascii_arr, offset, additional_offset: bool = false) -> void:
	for i in range(ascii_arr.size()):
		if _check_forbidden(ascii_arr, i): # Ignore space
			ascii_arr[i] = wrapi(
					ascii_arr[i] + offset + ((i * char_additional_offset) if additional_offset else 0 )
				,	MIN_ASCII
				,	MAX_ASCII
			)

func _check_forbidden(ascii_arr, index) -> bool:
	return ascii_arr[index] != SPACE_ASCII and ascii_arr[index] != NL_ASCII
