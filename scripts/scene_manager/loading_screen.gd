extends Control

@onready var loading_label = %Loading
@onready var progress_label = %Progress
@onready var progress_bar = %ProgressBar
@onready var loading_done_label = %LoadingDone

var progress: Array
var loading_timer: SceneTreeTimer

var loading_char := ["/", "-", "\\", "|"]
var current_char_index := 0
var loading_char_time := 0.1
var target_scene := ""
var load_status

func _ready() -> void:
	loading_done_label.hide()
	progress_bar.value = 0.0
	target_scene = SceneManager.get_target_scene()
	loading_timer = get_tree().create_timer(loading_char_time)
	loading_timer.timeout.connect(_loading_timer_timeout)
	ResourceLoader.load_threaded_request(target_scene)

func _input(event: InputEvent) -> void:
	if load_status != ResourceLoader.THREAD_LOAD_LOADED:
		return
	if SceneManager.skip_button_press:
		return
	if event is InputEventKey or event is InputEventMouseButton:
		_change_to_target_scene()

func _process(delta: float) -> void:
	load_status = ResourceLoader.load_threaded_get_status(target_scene, progress)
	var progress_percent = round(progress[0] * 100)
	progress_bar.value = progress_percent
	progress_label.text = str(progress_percent) + "%"
	
	if load_status == ResourceLoader.THREAD_LOAD_FAILED:
		push_error("Cannot load scene: %s" %target_scene)
		get_tree().quit()
	if load_status == ResourceLoader.THREAD_LOAD_LOADED:
		await get_tree().create_timer(0.3).timeout # Yes, this is intentional 
		if SceneManager.skip_button_press:
			_change_to_target_scene()
		_animate_loading()

func _loading_timer_timeout() -> void:
	loading_timer = get_tree().create_timer(loading_char_time)
	loading_timer.timeout.connect(_loading_timer_timeout)
	current_char_index = wrapi(current_char_index + 1, 0, loading_char.size())
	loading_label.text = loading_char[current_char_index]

func _animate_loading() -> void:
	set_process(false)
	loading_done_label.show()
	loading_label.get_parent().hide()
	%AnimationPlayer.play("fading")

func _change_to_target_scene() -> void:
	var new_scene = ResourceLoader.load_threaded_get(target_scene)
	get_tree().change_scene_to_packed(new_scene)
