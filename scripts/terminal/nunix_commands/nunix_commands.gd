class_name NunixCommands extends Resource
# NunixCommands (Not Unix Commands)
# Commands that mimcks unix commands
var parsed_input: PackedStringArray
var output_str: String
var shell: BabuneBash

func _init(_shell: BabuneBash):
	shell = _shell

func process_input(string: String):
	if !string.is_empty():
		var parsed_input = string.split(" ", false)
		process_argument(parsed_input)
	
func process_argument(_parsed_input: PackedStringArray):
	parsed_input = _parsed_input
	match parsed_input[0]:
		"clear":
			clear()
		"ls":
			ls()
		"cd":
			cd()
		"cat":
			cat()
		"ssh":
			ssh()
		"quit":
			clear()
			shell.terminal.close()
			Timemode.current_time_mode = Timemode._time_mode.NORMAL
		_:
			output_str = parsed_input[0]+':'+" command not found"

func clear():
	output_str = ""

func ls():
	clear()
	var dir = DirAccess.open(shell.directories_string[shell.current_env])
	for d in dir.get_directories():
		output_str += d + "\n"
	for f in dir.get_files():
		output_str += f + "\n"

func cd():
	clear()
	var curr_dir = shell.directories_string[shell.current_env]
	var dir = DirAccess.open(curr_dir)
	if parsed_input.size() == 1:
		output_str = parsed_input[0]+':'+" file path is empty"
		return

	var parameter = parsed_input[1]
	
	if !dir.dir_exists(curr_dir + parameter):
		parameter = "/" + parameter
		if !dir.dir_exists(curr_dir + parameter):
			output_str = parsed_input[0]+':'+" The directory " + "'"+ parsed_input[1] +"'" +" does not exist"
			return
			
	dir.change_dir(parameter)
	
	if parameter.begins_with("/.") or parameter.begins_with("."):
		var splt: PackedStringArray = curr_dir.rsplit("/", true, 1)
		var last_char: String = splt[splt.size() - 1]
		shell.directories_string[shell.current_env] = curr_dir.left(curr_dir.length() - last_char.length())
		print("String:")
		print(splt)
	else:
		shell.directories_string[shell.current_env] = curr_dir + parameter
	
func cat():
	clear()
	var dir = shell.directories_string[shell.current_env]
	
	if parsed_input.size() == 1:
		output_str = parsed_input[0]+':'+" file path is empty"
		return

	var parameter = parsed_input[1]
	
	if !FileAccess.file_exists(dir + parameter):
		parameter = "/" + parameter
		if !FileAccess.file_exists(dir + parameter):
			output_str = parsed_input[0]+':'+" No such file or directory"
			return
			
	var file = FileAccess.open(dir + parameter, FileAccess.READ)
	output_str = file.get_as_text()
	
	file.close()
	
func ssh():
	clear()
