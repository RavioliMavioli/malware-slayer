class_name Terminal extends Control

static var instance: Terminal

signal time_out

enum STATUS {OPEN, CLOSE}
enum MODE {SAFE, UNSAFE}
static var current_status: STATUS = STATUS.CLOSE
static var current_mode: MODE = MODE.SAFE

var ttyanim: AnimationPlayer:
	get: return $TTYAnimation
var safe_env: HBoxContainer:
	get: return %Safe
var unsafe_env: HBoxContainer:
	get: return %Unsafe

@onready var tty_input: RichTextLabel = $TTY/Text/VBoxContainer/Input
@onready var tty_output: RichTextLabel = $TTY/Text/VBoxContainer/Output
@onready var title: Button = $TTY/Text/Title/HBoxContainer/Title
@onready var env_buttons: ButtonGroup = $Menu/Control/VBoxContainer/env1.button_group
@onready var bash: Bash = Bash.new(self, env_buttons)

var processing_power_multiplier: int = 8
var processing_power: float:
	set(val):
		processing_power = clampf(val, 0.0, 100.0)
		if processing_power == 0.0:
			time_out.emit()

func _init() -> void:
	instance = self

func _ready():
	close()
	$Template.hide()
	env_buttons.pressed.connect(buttons_pressed) # Manage clicked button on cursor
	update_button_and_shell() # Initialize shell and button

func _unhandled_input(event: InputEvent):
	if !get_meta("is_active"):
		return
	
	if (Input.is_action_pressed("Control") and Input.is_action_just_pressed("Up")) or Input.is_action_just_pressed("ui_up"):
		var buttons: Array = env_buttons.get_buttons()
		var pressed_button: Button = env_buttons.get_pressed_button()
		var current_button_index: int = buttons.find(pressed_button,0)
		var new_button_index: int = wrapi(current_button_index - 1, 0, buttons.size())
		
		pressed_button.button_pressed = false
			
		buttons[new_button_index].button_pressed = true
		
	if (Input.is_action_pressed("Control") and Input.is_action_just_pressed("Down")) or Input.is_action_just_pressed("ui_down"):
		var buttons: Array = env_buttons.get_buttons()
		var pressed_button: Button = env_buttons.get_pressed_button()
		var current_button_index: int = buttons.find(pressed_button,0)
		var new_button_index: int = wrapi(current_button_index + 1, 0, buttons.size())
			
		pressed_button.button_pressed = false
			
		buttons[new_button_index].button_pressed = true

	bash.input(event)
	update_button_and_shell()

func _physics_process(delta: float) -> void:
	ttyanim.speed_scale = 1/Engine.time_scale
	_process_processing_power(delta)
	_process_env_text()

func buttons_pressed(_btn):
	update_button_and_shell()

func update_button_and_shell():
	bash.update()
	title.text = " " + env_buttons.get_pressed_button().text + " "

func open():
	Player.enable_input = Player.ENABLE_INPUT.DISABLED
	CAV.current_zoom_type = CAV.ZOOM_TYPE.ZOOMED
	Cursor.current_cursor_state = Cursor.CURSOR_STATE.NORMAL
	current_status = STATUS.OPEN
	ttyanim.play("open")
	if current_mode == MODE.UNSAFE:
		processing_power_multiplier = -8
	
	
func close():
	Player.enable_input = Player.ENABLE_INPUT.ENABLED
	CAV.current_zoom_type = CAV.ZOOM_TYPE.NORMAL
	Cursor.current_cursor_state = Cursor.CURSOR_STATE.AIM
	Timemode.current_time_mode = Timemode.TIME_MODE.NORMAL
	current_status = STATUS.CLOSE
	ttyanim.play_backwards("close")
	processing_power_multiplier = 8

func _process_processing_power(delta) -> void:
	var DM = delta * 1/Engine.time_scale
	processing_power = processing_power + (processing_power_multiplier * DM)

func _process_env_text() -> void:
	if current_mode == MODE.SAFE:
		safe_env.show()
		unsafe_env.hide()
		return
	safe_env.hide()
	unsafe_env.show()
