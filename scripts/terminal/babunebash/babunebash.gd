class_name BabuneBash extends Resource
# BabuneBash (Bash but not exactly bash shell)
# A script that mimicks bash shell language and UNIX commands

var nunix: NunixCommands = NunixCommands.new(self)
var terminal: Control
var tty_in: RichTextLabel
var tty_out: RichTextLabel

const def_user_path: String = "user://"
const def_parent_folders: PackedStringArray = ["root", "remote"]
const def_folders: PackedStringArray = ["bin", "usr", "mnt", "etc"]
const def_files: PackedStringArray = ["run.lck", "boot.lck", "proc.lck"]

var button_group: ButtonGroup
var env_string_contents: PackedStringArray
var root_dir: String
var remote_root_dir: String
var directories_string: PackedStringArray
var current_env: int = 0

func _init(_terminal: Control, _button_group: ButtonGroup):
	terminal = _terminal
	tty_in = terminal.tty_input
	tty_out = terminal.tty_output
	button_group = _button_group
	# TODO: Change this below so when reloading the game the history remains presist
	env_string_contents.resize(button_group.get_buttons().size())
	env_string_contents.fill("")
	
	var dir = DirAccess.open(def_user_path)
	for f1 in def_parent_folders:
		if !dir.dir_exists(f1):
			dir.make_dir(f1)
		for f2 in def_folders:
			if !dir.dir_exists(f1 + "/" + f2):
				dir.make_dir(f1 + "/" + f2)
		for f3 in def_files:
			var r_f = f1 + "/" + f3.replace(".lck", "")
			if f1 == def_parent_folders[0] and !dir.file_exists(r_f):
				dir.make_dir(r_f)
			if f1 == def_parent_folders[1] and !dir.dir_exists(f1 + "/" + f3):
				print(f1 + "/" + f3)
				var file = FileAccess.open(def_user_path + f1 + "/" + f3, FileAccess.WRITE)
				file.store_string("root")
				file.close()
	init_dir()

func input(event: InputEvent):
	# Main function call
	if event is InputEventKey and event.is_pressed():
		parse_input(event)
		
	if event.is_action_pressed("Enter"):
		nunix.process_input(tty_in.text)
		set_output(nunix.output_str)
		tty_in.text = " "
	
func parse_input(event: InputEvent):
	# TODO: Replace this with CodeEdit node
	# For now, I dont' know how to use CodeEdit node
	var typed_event: InputEventKey = event as InputEventKey
	var key_typed = PackedByteArray([typed_event.unicode]).get_string_from_utf8()
	
	if typed_event.as_text_key_label() == "Backspace" and tty_in.text.length() >= 1:
		tty_in.text = tty_in.text.erase(tty_in.text.length() - 1)
		
	if !typed_event.as_text_key_label().contains("Ctrl"):
		tty_in.text += key_typed

func set_output(string: String):
	env_string_contents.set(current_env, string)

func update():
	# TODO: These updates are making 0.16 ms slower on each frame what the hell
	# TODO: Put them on _input and make it work
	update_current_env()
	update_output()
	update_buttons_name()
	
func update_current_env():
	# Set environment to the current selected one
	current_env = button_group.get_buttons().find(button_group.get_pressed_button())
	
func update_output():
	tty_out.text = env_string_contents[current_env]

func update_buttons_name():
	var ar: Array[BaseButton] = button_group.get_buttons()
	for i in len(ar):
		var s: PackedStringArray = directories_string[i].split("/", true, 4)
		var new_s: String = s[s.size() - 1].replace("root","").replace("remote", "").replace(".lck", "/")
		if new_s.begins_with(""):
			new_s = "/" + new_s
		ar[i].text = new_s
			
func init_dir():
	var dir: PackedStringArray = [""]
	dir.resize(6)
	root_dir = "user://root"
	remote_root_dir = "user://remote"
	
	dir[0] = remote_root_dir
	dir[1] = remote_root_dir
	
	dir[2] = root_dir
	dir[3] = root_dir + "/bin"
	dir[4] = root_dir + "/usr"
	dir[5] = root_dir + "/mnt"
	
	directories_string = dir
	
