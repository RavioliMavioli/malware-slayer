extends Node

enum TYPE {PLAYER, ENEMY, BOSS, ENTITY}

var sub_types := {
	TYPE.PLAYER:{
		player = load("res://scripts/player/player.tscn"),
	},
	TYPE.ENEMY:{
		test = load("res://scripts/enemies/test/enemy_test.tscn"),
	},
}

const BASE_GROUP := "entity"

signal entity_instantiating(entity:Node)

func _ready():
	add_to_group(GameSaveService.SAVE_GROUP)

func get_type_name(type:TYPE) -> String:
	return TYPE.find_key(type)

func get_entity_type(entity:Node) -> TYPE:
	return entity.get_meta("type")

func get_entity_sub_type(entity:Node) -> String:
	return entity.get_meta("sub_type")

func get_all_of_type(type:TYPE) -> Array[Node]:
	return get_tree().get_nodes_in_group(get_type_group(type))

func get_all_of_sub_type(type:TYPE, sub_type:String) -> Array[Node]:
	return get_tree().get_nodes_in_group(get_sub_type_group(type, sub_type))

func get_type_group(type:TYPE) -> String:
	return get_type_name(type)

func get_sub_type_group(type:TYPE, sub_type:String) -> String:
	return get_type_name(type)+"_"+sub_type

func mark_as_unsaveable(entity:Node):
	entity.set_meta("unsaveable_entity", true)

func is_unsaveable(entity:Node) -> bool:
	return entity.has_meta("unsaveable_entity")

func new_entity(type:TYPE, sub_type:String) -> Node:
	var scene :PackedScene = sub_types[type][sub_type]
	var entity :Node = scene.instantiate()
	entity.set_meta("type", type)
	entity.set_meta("sub_type", sub_type)
	entity.add_to_group(BASE_GROUP)
	entity.add_to_group(get_type_group(type))
	entity.add_to_group(get_sub_type_group(type, sub_type))
	entity_instantiating.emit(entity)
	return entity

func _write_data(common_data:Dictionary):
	var list := []
	for entity:Node in get_tree().get_nodes_in_group(EntityManager.BASE_GROUP):
		if is_unsaveable(entity):
			continue
		var data := {
			id = entity.get_instance_id(),
			type = EntityManager.get_entity_type(entity),
			sub_type = EntityManager.get_entity_sub_type(entity),
			parent_path = entity.get_parent().get_path(),
			custom_data = {},
		}
		if entity is Node2D:
			data.transform = var_to_str(entity.global_transform)
		entity.propagate_call("_write_data", [data.custom_data])
		list.append(data)
	common_data.entities = list

func _read_data_preload(common_data:Dictionary):
	var list :Array = common_data.entities
	for data in list:
		var entity := EntityManager.new_entity(data.type, data.sub_type)
		if entity is Node2D:
			entity.global_transform = str_to_var(data.transform)
		GameSaveService.register_loaded_node(data.id, entity)

func _read_data(common_data:Dictionary):
	var list :Array = common_data.entities
	for data in list:
		var entity :Node = GameSaveService.get_loaded_node(data.id)
		var parent := get_node(data.parent_path)
		entity.propagate_call("_read_data", [data.custom_data])
		parent.add_child(entity)
		if entity is Node2D:
			entity.global_transform.origin -= parent.global_transform.origin
