class_name ObjectPool extends RefCounted

var current_size: int = 0
var auto_resize: bool = true

var _template: PackedScene
var _node_parent: Node

var _array: Array = []
var _free_array: Array = []

func _init(template: PackedScene, node_parent:Node=null):
	_template = template
	_node_parent = node_parent

func resize(newSize:int):
	if newSize > current_size:
		_array.resize(newSize)
		for i in range(current_size, newSize):
			_create_new_instance(i)
	elif newSize < current_size:
		for i in range(newSize, current_size):
			_destroy_instance(i)
		_array.resize(newSize)
	current_size = newSize

func is_claimed(obj:Node)-> bool:
	return obj.get_meta("claimed_from_pool") == true

func claim_new()-> Node:
	if _free_array.is_empty():
		# just doubling the size is generally good practice
		if auto_resize:
			resize(maxi(current_size, 10)*2)
		else:
			return null
	var obj := _free_array.pop_back() as Node
	obj.set_meta("claimed_from_pool", true)
	if obj.has_method("_pool_claim"):
		obj.call("_pool_claim")
	return obj

func unclaim(obj:Node):
	assert(obj.get_meta("object_pool") == self, "Object does not belong to this pool")
	assert(is_claimed(obj), "Object has not been claimed")
	obj.set_meta("claimed_from_pool", false)
	_free_array.push_back(obj)
	if obj.has_method("_pool_unclaim"):
		obj.call("_pool_unclaim")

func clear():
	for i in _array.size():
		_destroy_instance(i)
	_array.clear()
	_free_array.clear()
	current_size = 0

func _create_new_instance(ind:int)-> Node:
	var obj := _template.instantiate()
	if _node_parent != null:
		_node_parent.add_child(obj)
	obj.set_meta("object_pool", self)
	obj.set_meta("claimed_from_pool", false)
	_array[ind] = obj
	_free_array.push_back(obj)
	return obj

func _destroy_instance(ind:int):
	var obj :Node = _array[ind]
	obj.queue_free()
