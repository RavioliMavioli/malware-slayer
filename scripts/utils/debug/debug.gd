extends Control

var terminal: Terminal:
	get: return Terminal.instance
var world_enviroment: WorldEnvironment:
	get: return MainGame.instance.world_environment
var we_enviroment: Environment
var debug_box: Button:
	get: return $Debug
var container: Control:
	get: return $Container
var timeslider: HSlider:
	get: return $Container/VBoxContainer/Timescale/HSlider
var timescheck: CheckBox:
	get: return $Container/VBoxContainer/Timescale/OptionButton
var timelabel: Label:
	get: return $Container/VBoxContainer/Timescale/Label
var floating_node: CanvasLayer:
	get: return MainGame.instance.get_node("%FloatingUI")
var pause_physics: CheckBox:
	get: return $Container/VBoxContainer/Pause
var terminal_box: CheckBox:
	get: return $Container/VBoxContainer/ShowTerminal
var free_look_box: CheckBox:
	get: return $Container/VBoxContainer/FreeLook
var player_state_box: CheckBox:
	get: return $Container/VBoxContainer/PlayerState
var hide_floating_box: CheckBox:
	get: return $Container/VBoxContainer/HideFloating
var enable_particles_box: CheckBox:
	get: return $Container/VBoxContainer/EnableParticles
var enable_shaders_box: CheckBox:
	get: return $Container/VBoxContainer/EnableShaders
var enable_we_box: CheckBox:
	get: return $Container/VBoxContainer/EnableWorldEnvironment
var init_pos
var cam_pos
func _ready():
	init_pos = container.global_position
	debug_box.pressed.connect(_debug)
	pause_physics.pressed.connect(_pause)
	terminal_box.pressed.connect(_terminal)
	free_look_box.pressed.connect(_freelook)
	player_state_box.pressed.connect(_playerstate)
	hide_floating_box.pressed.connect(_floating)
	enable_particles_box.pressed.connect(_particles)
	enable_shaders_box.pressed.connect(_shaders)
	enable_we_box.pressed.connect(_we)
	
	enable_particles_box.button_pressed = Levels.vfx_particle_node.visible
	enable_shaders_box.button_pressed = Levels.vfx_shader_node.visible
	enable_we_box.button_pressed = true
	we_enviroment = world_enviroment.environment

func _input(event):
	_freelook_input(event)

func _process(delta):
	terminal_box.button_pressed = true if Terminal.current_status == Terminal.STATUS.OPEN else false
	if debug_box.button_pressed:
		container.global_position = lerp(container.global_position, init_pos, delta * (1/Engine.time_scale) * 10)
		_time()
		_unlimited_terminal_power()
	else:
		container.global_position = lerp(container.global_position, container.global_position + Vector2(get_viewport().size.x - container.global_position.x,0), delta * (1/Engine.time_scale) * 10)

func _time():
	timelabel.text = str(timeslider.value)
	if timescheck.button_pressed:
		Engine.time_scale = timeslider.value
		Timemode.engine_time = timeslider.value
		Audio.set_low_pass(Engine.time_scale * Audio.MAX_HZ)
		Audio.set_amp(1/Engine.time_scale - 1)
	else:
		Timemode.reset_time_mode()

func _unlimited_terminal_power():
	if terminal_box.button_pressed:
		terminal.instance.processing_power = 100.0

func _debug():
	pass
	
func _pause():
	get_tree().paused = pause_physics.button_pressed

func _terminal():
	if terminal_box.button_pressed:
		terminal.open()
	else:
		terminal.close()

func _freelook():
	Camera.instance.set_physics_process(!free_look_box.button_pressed)

func _playerstate():
	Player.instance.get_node("%State").visible = player_state_box.button_pressed

func _freelook_input(event: InputEvent):
	var d_mouse = get_global_mouse_position()
	if free_look_box.button_pressed:
		if event is InputEventMouseMotion and (Input.is_action_pressed("Shoot_1")):
			Camera.instance.global_position -= event.relative / Camera.instance.zoom
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_WHEEL_UP:
			Camera.instance.zoom += Vector2(0.05, 0.05) * Camera.instance.zoom
			Camera.instance.global_position -= d_mouse / Camera.instance.zoom / 20.0
		if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_WHEEL_DOWN:
			Camera.instance.zoom -= Vector2(0.05, 0.05) * Camera.instance.zoom
			Camera.instance.global_position += d_mouse / Camera.instance.zoom / 20.0

func _floating():
	floating_node.visible = !hide_floating_box.button_pressed

func _particles():
	Levels.vfx_particle_node.visible = enable_particles_box.button_pressed
	
func _shaders():
	Levels.vfx_shader_node.visible = enable_shaders_box.button_pressed

func _we():
	if enable_we_box.button_pressed:
		world_enviroment.environment = we_enviroment
	else:
		world_enviroment.environment = null
