class_name HealthComponent extends Node2D

@export var max_value :int = 100
@export var value :int = 100:
	set(v): value = clampi(v, 0, max_value)
var percent:float:
	get: return float(value)/max_value
	set(v): value = ceili(max_value*v)
var is_dead :bool = false

signal changed(res:Result)
signal died()

static func new_package() -> ChangePackage:
	return ChangePackage.new()

func get_info_string()->String:
	return "%d/%d"%[value, max_value]

func apply(change:ChangePackage)-> Result:
	var res = Result.new()
	res.change_package = change
	if is_dead:
		#changed.emit(res)
		return res
	
	var old := value
	value += change.amount
	
	res.actual_amount = value - old
	if change.damage > 0 and value == 0:
		res.killed = true
		is_dead = true
	
	changed.emit(res)
	if res.killed:
		died.emit()
	return res

func _write_data(data:Dictionary):
	data.health = value

func _read_data(data:Dictionary):
	value = data.health

class ChangePackage:
	# you can put here some more data for different systems
	# for example you might want this
	# if you want to return damage back to the attacker or count kills per entity:
	# var source_entity :Node
	# or if you want damage types and resistances:
	# var type :DAMAGE_TYPE
	var amount :int = 0
	var damage:
		get: return maxi(0, -amount)
		set(val): amount = -maxi(0, val)
	var healing:
		get: return maxi(0, amount)
		set(val): amount = maxi(0, val)

class Result:
	var actual_amount :int = 0
	var killed :bool = false
	var change_package :ChangePackage
