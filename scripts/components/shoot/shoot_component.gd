class_name ShootComponent extends Node2D
#### EACH KINDS OF projectileS MUST HAVE THEIR OWN SHOOT COMPONENT ####
@export_group("Required Nodes")
@export var projectile_scene: PackedScene

var aim_center: Marker2D:
	get: return %AimCenter
var projectile_spawn: Marker2D

@export_group("Projectile Properties")
@export_subgroup("Properties")
@export var mechanism: MECHANISM = MECHANISM.FULLY_AUTOMATIC
@export_range(1, 20, 1) var projectile_ammount:int = 5
@export_range(10.0, 3000.0, 1.0) var projectile_speed: float
@export var damage: int
@export var projectile_lifetime: float = 2
@export var shoot_per_minute: int = 1000
@export_range(0.0, 10.0, 1.0) var angle_randomness:float = 0
@export_range(5.0, 200.0, 5.0) var projectile_spread:float = 30.0
@export_range(1.0, 90.0, 1.0) var projectile_spread_degrees:float = 20.0
@export_range(0.1, 10.0, 0.1) var curve_factor:float = 3.0
@export var gap: bool = false

@export_group("Camera Shake")
@export var camera_shake_mode: VFX.camera_shake.STRENGTH = VFX.camera_shake.STRENGTH.SHORT_WEAK

enum MECHANISM {SEMI_AUTOMATIC, FULLY_AUTOMATIC}

var projectile_pool: ObjectPool
var shoot_timer: Timer
var held_down: bool = false
var cam_shake:= VFX.camera_shake.new()

func shoot() -> void:
	held_down = true
func unshoot() -> void:
	held_down = false
func set_projectile_spawn(_projectile_spawn: Marker2D) -> void:
	projectile_spawn = _projectile_spawn

func _ready():
	_init_pool()
	_init_timer()

func _physics_process(_delta) -> void:
	if shoot_timer.is_stopped() and held_down:
		cam_shake.shake(camera_shake_mode)
		_try_play_sfx()
		_shoot_projectile()
		shoot_timer.start()
	match mechanism:
		MECHANISM.FULLY_AUTOMATIC:
			pass
		MECHANISM.SEMI_AUTOMATIC:
			held_down = false

func _init_timer():
	shoot_timer = Timer.new()
	shoot_timer.autostart = false
	shoot_timer.one_shot = true
	shoot_timer.wait_time = 1.0 / (shoot_per_minute as float / 60.0)
	add_child(shoot_timer)
	
func _init_pool():
	projectile_pool = ObjectPoolService.get_pool(projectile_scene)

func _shoot_projectile():
	var listed_gap:Array[int] = []
	if gap:
		listed_gap.append(round(projectile_ammount/2.0))
		if projectile_ammount %2 == 0:
			listed_gap.append(round(projectile_ammount/2.0) - 1)
			
	if projectile_ammount == 1:
		var projectile := _create_and_get_projectile()
		projectile.global_rotation = projectile_spawn.global_rotation + _rng()
		return
		
	for i in projectile_ammount:
		if !listed_gap.has(i):
			var projectile := _create_and_get_projectile()
			var spawn_line = projectile_spread/2 - ( i * projectile_spread/(projectile_ammount-1) )
			var spawn_line_normalized = spawn_line / (projectile_spread/2)
		
			var curved_spawn_line:float
			curved_spawn_line = curve_factor * cos(spawn_line_normalized*PI/2)
		
			projectile.global_position.y += spawn_line
				
			# Rotates the whole projectiles with matrix transformation, so it doesn't spawn in a straight line,
			# But rotated along the direction its facing
				
			# X = Ax + (Bx - Ax) cos a - (By - Ay) sin a
			# Y = Ay + (Bx - Ax) sin a + (By - Ay) cos a
				
			var Ax = projectile_spawn.global_position.x
			var Ay = projectile_spawn.global_position.y
			var Bx = projectile.global_position.x + curved_spawn_line
			var By = projectile.global_position.y
			var alpha = projectile.global_rotation

			var new_position:Vector2 = Vector2(	Ax + (Bx - Ax) * cos(alpha) - (By - Ay) * sin(alpha),
												Ay + (Bx - Ax) * sin(alpha) + (By - Ay) * cos(alpha))
			
			projectile.global_position = new_position
			projectile.global_rotation += deg_to_rad( projectile_spread_degrees/2 - (i * projectile_spread_degrees/(projectile_ammount-1)) ) + _rng()

func _create_and_get_projectile() -> Projectile:
	var projectile: Projectile = projectile_pool.claim_new()
	var change_package = HealthComponent.new_package()
	change_package.damage = damage
	projectile.health_change = change_package
	projectile.speed = projectile_speed
	projectile.lifetime = projectile_lifetime
	projectile.global_position = projectile_spawn.global_position
	projectile.global_rotation = projectile_spawn.global_rotation
	return projectile

func _rng() -> float:
	return deg_to_rad(randf_range(angle_randomness, -angle_randomness))
	
func _try_play_sfx() -> void:
	var sfx_node: SFXPlayer = get_node_or_null("SFXPlayer")
	if sfx_node == null:
		return
	sfx_node.play()
	
