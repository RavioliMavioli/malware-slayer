class_name DialogueManager extends Node2D

###	Some commands
### HALT = "%p"
### SUBSTITUTION = "%v"

@export var json: JSON
@export var speed_multiplier: float = 2.0
@export var conditions: Dictionary
@export var activation_method: ACTIVATION_METHOD = ACTIVATION_METHOD.TRIGGER_AREA_ON_CLICK
@export var exitable: bool = true
@export var once: bool = false

enum ACTIVATION_METHOD {TRIGGER_AREA_AUTO, TRIGGER_AREA_ON_CLICK, MANUAL}

const UPDATE_TIME: float = 2.0
const DELAY_BEFORE_RAGAINS_CONTROLS: float = 0.01

var dialogue: Dialogue:
	get: return Game.instance.ui.get_node("MasterDialogue")
var trigger: Area2D:
	get: return $TriggerArea
var interacted := false

func update_conditions() -> void:
	pass

func start_dialogue() -> void:
	_setup_dialogue()
	_disable_camera()
	update_conditions()
	assert(conditions.size() > 0, "Conditions are not setup correctly.")
	var ids :Array[int] = dialogue.get_ids_from_conditions(conditions)
	assert(ids.size() > 0, "No conditions are met, please make sure it meets at least one condition.")
	dialogue.start(ids)
	Player.enable_input = Player.ENABLE_INPUT.DISABLED

func exit_dialogue(is_normal: bool = true) -> void:
	_enable_camera()
	dialogue.exit(is_normal)
	await get_tree().create_timer(0.1).timeout
	Player.enable_input = Player.ENABLE_INPUT.ENABLED

func _ready() -> void:
	assert(json != null, "JSON is not valid or empty.")
	trigger.body_exited.connect(_body_exited)
	trigger.body_entered.connect(_body_entered)
	dialogue.finished.connect(_dialogue_finished)

func _input(event: InputEvent) -> void:
	if event.is_action_pressed("ui_cancel") and dialogue.is_open:
		if !exitable:
			return
		exit_dialogue(false)
	if activation_method != ACTIVATION_METHOD.TRIGGER_AREA_ON_CLICK:
		return
	if interacted and once:
		return
	if event.is_action_pressed("Down") and trigger.has_overlapping_bodies() and Player.enable_input == Player.ENABLE_INPUT.ENABLED and Player.instance.is_on_floor():
		start_dialogue()
		
func _setup_dialogue() -> void:
	dialogue.speed_multiplier = speed_multiplier
	dialogue.json_read(json)

func _disable_camera() -> void:
	Camera.current_camera_mode = Camera.CAMERA_MODE.CENTER_PLAYER

func _enable_camera() -> void:
	Camera.current_camera_mode = Camera.CAMERA_MODE.FOLLOW_PLAYER

func _dialogue_finished(is_normal: bool) -> void:
	if is_normal:
		interacted = true
	exit_dialogue(is_normal)

func _body_exited(body: Node2D) -> void:
	if exitable:
		exit_dialogue(false)

func _body_entered(body: Node2D) -> void:
	if activation_method == ACTIVATION_METHOD.TRIGGER_AREA_AUTO:
		start_dialogue()
