class_name ShootComponent extends Node2D
#### EACH KINDS OF BULLETS MUST HAVE THEIR OWN SHOOT COMPONENT ####
@export_group("Required Nodes")
@export var projectile: PackedScene
var aim_center: Marker2D:
	get: return %AimCenter
var bullet_spawn: Marker2D:
	get: return %BulletSpawn

@export_group("Bullet Properties")
@export_subgroup("Properties")
@export var mechanism: MECHANISM = MECHANISM.FULLY_AUTOMATIC
@export var is_single_bullet: bool = false
@export_range(10.0, 2000.0, 1.0) var bullet_speed: float
@export var damage: int
@export var bullet_lifetime: float = 2
@export var shoot_per_minute: int = 1000
@export_range(0.0, 10.0, 1.0) var angle_randomness:float = 0
@export_range(1, 20, 1) var bullet_ammount:int = 5
@export_range(5.0, 200.0, 5.0) var bullet_spread:float = 30.0
@export_range(1.0, 90.0, 1.0) var bullet_spread_degrees:float = 20.0
@export_range(0.1, 10.0, 0.1) var curve_factor:float = 3.0
@export var gap: bool = false

var camera_shaker := CameraShaker.new()

enum MECHANISM {SEMI_AUTOMATIC, FULLY_AUTOMATIC}

var bullet_pool: ObjectPool
var shoot_timer: Timer
var held_down: bool = false
var sfx_index := 0

func _ready():
	_init_pool()
	_init_timer()

func _physics_process(_delta):
	if shoot_timer.is_stopped() and held_down:
		camera_shaker.shake_short_weak()
		_try_play_sfx()
		_shoot_bullet()
		shoot_timer.start()
	match mechanism:
		MECHANISM.FULLY_AUTOMATIC:
			pass
		MECHANISM.SEMI_AUTOMATIC:
			held_down = false

func _init_timer():
	shoot_timer = Timer.new()
	shoot_timer.autostart = false
	shoot_timer.one_shot = true
	shoot_timer.wait_time = 1.0 / (shoot_per_minute as float / 60.0)
	add_child(shoot_timer)
	
func _init_pool():
	bullet_pool = ObjectPoolService.get_pool(projectile)

func shoot():
	held_down = true

func unshoot():
	held_down = false

func _shoot_bullet():
	var listed_gap:Array[int] = []
	if gap:
		listed_gap.append(round(bullet_ammount/2.0))
		if bullet_ammount %2 == 0:
			listed_gap.append(round(bullet_ammount/2.0) - 1)
			
	if is_single_bullet:
		var bullet: Bullet = bullet_pool.claim_new()
		bullet.global_position = bullet_spawn.global_position
		bullet.global_rotation = bullet_spawn.global_rotation + _rng()
		return
		
	for i in bullet_ammount:
		if !listed_gap.has(i):
			var bullet: Bullet = bullet_pool.claim_new()
			bullet.damage = damage
			bullet.speed = bullet_speed
			bullet.lifetime = bullet_lifetime
			bullet.global_position = bullet_spawn.global_position
			bullet.global_rotation = bullet_spawn.global_rotation
				
			var spawn_line = bullet_spread/2 - ( i * bullet_spread/(bullet_ammount-1) )
			var spawn_line_normalized = spawn_line / (bullet_spread/2)
		
			var curved_spawn_line:float
			curved_spawn_line = curve_factor * cos(spawn_line_normalized*PI/2)
		
			bullet.global_position.y += spawn_line
				
			# Rotates the whole bullets with matrix transformation, so it doesn't spawn in a straight line,
			# But rotated along the direction its facing
				
			# X = Ax + (Bx - Ax) cos a - (By - Ay) sin a
			# Y = Ay + (Bx - Ax) sin a + (By - Ay) cos a
				
			var Ax = bullet_spawn.global_position.x
			var Ay = bullet_spawn.global_position.y
			var Bx = bullet.global_position.x + curved_spawn_line
			var By = bullet.global_position.y
			var alpha = bullet.global_rotation

			var new_position:Vector2 = Vector2(	Ax + (Bx - Ax) * cos(alpha) - (By - Ay) * sin(alpha),
												Ay + (Bx - Ax) * sin(alpha) + (By - Ay) * cos(alpha))
			
			bullet.global_position = new_position
			bullet.global_rotation += deg_to_rad( bullet_spread_degrees/2 - (i * bullet_spread_degrees/(bullet_ammount-1)) ) + _rng()

func _rng() -> float:
	return deg_to_rad(randf_range(angle_randomness, -angle_randomness))
	
func _try_play_sfx() -> void:
	var sfx_node: SFXPlayer = get_node_or_null("SFXPlayer")
	if sfx_node == null:
		return
	sfx_node.play_sfx()
	
