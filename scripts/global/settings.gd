extends Node

const FILE_PATH := "settings"

enum _screen_resolution {_1280x720, _1600x900, _1920x1080, _2560x1440, _3840x2160}
enum _fullscreen {WINDOWED, FULLSCREEN}
enum _vsync {DISABLED, ENABLED}

# perhaps these are not needed at all? adding too many of them seems messy
# it's completely normal to rely on arbitrary magic strings when it comes to configs and settings
# in fact, these enums don't have to exist in this singleton at all, they can be located elsewhere
# perhaps even in settings UI, temporarily
# and they don't have to be enums, godot can serialize any basic type, including colors and vectors
var current_screen_resolution: _screen_resolution:
	get: return get_setting("current_screen_resolution")
	set(val): set_setting("current_screen_resolution", val)
var is_fullscreen: _fullscreen:
	get: return get_setting("is_fullscreen")
	set(val): set_setting("is_fullscreen", val)
var is_vsync: _vsync:
	get: return get_setting("is_vsync")
	set(val): set_setting("is_vsync", val)

signal setting_changed(setting:String)

func _ready() -> void:
	DataService.data_changed.connect(_data_changed)
	# there is currently no implementation for any setting
	# implementation can be here, temporary or if there is no other place

func _data_changed(file_path:String, _section:String, key:String):
	if file_path != FILE_PATH:
		return
	setting_changed.emit(key)

func get_setting(setting: String, default :Variant = null):
	return DataService.get_wrapper(FILE_PATH).get_data(setting, default)

func set_setting(setting :String, value :Variant):
	DataService.get_wrapper(FILE_PATH).set_data(setting, value)
