extends Node

enum TYPE {PLAYER, ENEMY, BOSS, ENTITY}

var sub_types := {
	TYPE.PLAYER:{
		player = load("res://scripts/player/player.tscn"),
	},
	TYPE.ENEMY:{
		test = load("res://scripts/enemies/test/enemy_test.tscn"),
	},
}

signal entity_instantiating(entity:Node)

func get_type_name(type:TYPE) -> String:
	return TYPE.find_key(type)

func get_entity_type(entity:Node) -> TYPE:
	return entity.get_meta("type")

func get_entity_sub_type(entity:Node) -> String:
	return entity.get_meta("sub_type")

func get_all_of_type(type:TYPE) -> Array[Node]:
	return get_tree().get_nodes_in_group(get_type_group(type))

func get_all_of_sub_type(type:TYPE, sub_type:String) -> Array[Node]:
	return get_tree().get_nodes_in_group(get_sub_type_group(type, sub_type))

func get_type_group(type:TYPE) -> String:
	return get_type_name(type)

func get_sub_type_group(type:TYPE, sub_type:String) -> String:
	return get_type_name(type)+"_"+sub_type

func new_entity(type:TYPE, sub_type:String) -> Node:
	var scene :PackedScene = sub_types[type][sub_type]
	var entity :Node = scene.instantiate()
	entity.set_meta("type", type)
	entity.set_meta("sub_type", sub_type)
	entity.add_to_group(get_type_group(type))
	entity.add_to_group(get_sub_type_group(type, sub_type))
	entity_instantiating.emit(entity)
	return entity

