class_name Camera extends Camera2D

@export var limit := Vector4(-100000, -100000, 100000, 100000)
# Built-in camera limiter is not reliable, so use this instead

enum CAMERA_MODE {STATIC, FOLLOW_PLAYER, CENTER_PLAYER}
enum ZOOM_TYPE {NORMAL, ZOOMED}

static var instance: Camera
static var current_camera_mode: CAMERA_MODE = CAMERA_MODE.FOLLOW_PLAYER
static var current_zoom_type: ZOOM_TYPE = ZOOM_TYPE.NORMAL

static var screen_resolution: Vector2
const const_viewport_resolution := Vector2(1024, 576)

const VERTICAL_OFFSET := -30.0
const HORIZONTAL_OFFSET := 130.0
const DM := 1.3
const MM := 4
const MAX_X := 600
const MAX_Y := 300
const ZOOM_FACTOR_NORMAL := 1.0
const ZOOM_FACTOR_ZOOMED := 2.3
var offset_x := 0.0
var camera_position: Vector2
var target_zoom: Vector2
var target_coordinate: Vector2
var global_position_dm: float
var last_player_mouse_delta: int

func set_cam_limit(_limit: Vector4) -> void:
	var tween = get_tree().create_tween()
	tween.tween_property(self, "limit", _limit, 3).set_ease(Tween.EASE_IN_OUT).set_trans(Tween.TRANS_QUAD)

func get_cam_limit() -> Vector4:
	return limit

func _init() -> void:
	instance = self

func _ready() -> void:
	screen_resolution = get_viewport().size

func _physics_process(delta):
	if current_camera_mode == CAMERA_MODE.STATIC:
		return
	var player_global_position: Vector2 = Player.instance.global_position
	var mouse_pos: Vector2 = get_global_mouse_position()
	var d_position: Vector2 = mouse_pos - global_position
	
	# Camera follows player
	global_position = Vector2(	lerp(global_position.x, player_global_position.x + offset_x, global_position_dm)			,
								lerp(global_position.y, player_global_position.y + VERTICAL_OFFSET, global_position_dm)	)
	zoom = lerp(zoom, target_zoom, global_position_dm)
	
	if current_camera_mode == CAMERA_MODE.CENTER_PLAYER:
		offset_x = 0.0
		global_position_dm = delta * MM / 2
		return
		
	match current_zoom_type:
		
		ZOOM_TYPE.NORMAL:
			last_player_mouse_delta = sign(mouse_pos.x - player_global_position.x)
			global_position_dm = delta * MM
			target_zoom = Vector2(ZOOM_FACTOR_NORMAL, ZOOM_FACTOR_NORMAL)
			target_coordinate = Vector2(0.0, 0.0)
			# Camera follows cursor
			var min_abs_d = Vector2(min(abs(d_position.x), MAX_X), min(abs(d_position.y), MAX_Y))
			
			global_position = lerp(global_position, global_position +  min_abs_d * sign(d_position), delta * DM)
				
			offset_x = lerp(offset_x, last_player_mouse_delta * HORIZONTAL_OFFSET, delta/2)
			
		ZOOM_TYPE.ZOOMED:
			global_position_dm = delta * MM / Engine.time_scale / 2
			target_zoom = Vector2(ZOOM_FACTOR_ZOOMED, ZOOM_FACTOR_ZOOMED)

			offset_x = lerp(offset_x, last_player_mouse_delta * HORIZONTAL_OFFSET / 2, delta / Engine.time_scale / 3)
	
	_cap_to_limit()

func _cap_to_limit() -> void:
	var clamped_pos := Vector2(	clamp(global_position.x, limit.x, limit.w),
								clamp(global_position.y, limit.y, limit.z))
	if current_zoom_type == ZOOM_TYPE.NORMAL:
		global_position = lerp(global_position, clamped_pos, global_position_dm)
