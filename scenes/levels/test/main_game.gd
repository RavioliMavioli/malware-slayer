class_name Game extends Node

static var instance: Game

var ui: CanvasLayer:
	get: return $UI
var cursor: Node2D:
	get: return $UI/Crosshair
var fps_value:
	get: return %FPSMeter

static var follow_player_node: Control:
	get: return instance.get_node("%FollowPlayer")
	
func _init() -> void:
	instance = self

func _ready():
	ObjectPoolService.default_parent = Levels.pooled_node
	if GameSaveService.has_prepared():
		GameSaveService.load_prepared()
	else:
		var player := EntityManager.new_entity(EntityManager.TYPE.PLAYER, "player")
		Levels.player_node.add_child(player)
	
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)
	
func _physics_process(delta) -> void:
	_follow_player()
	_time_manager(delta)
	_sound_manager(delta)

func _process(_delta) -> void:
	fps_value.text = str(Engine.get_frames_per_second())

func _follow_player() -> void:
	follow_player_node.global_position = Player.player_node.global_position

func _time_manager(delta) -> void:
	if Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Engine.time_scale = lerp(Engine.time_scale, Timemode.engine_time, delta * 10)
	else:
		Engine.time_scale = Timemode.engine_time

func _sound_manager(delta) -> void:
	var max_hz := 20500.0
	var target_hz := Engine.time_scale * max_hz
	if Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Audio.sfx_low_pass_effect.cutoff_hz = target_hz
	else:
		Audio.sfx_low_pass_effect.cutoff_hz = lerp(Audio.sfx_low_pass_effect.cutoff_hz, max_hz, delta * 10)
	
func _on_save_button_pressed() -> void:
	var error := GameSaveService.save_to_file("test_save")
	if error != OK:
		push_error("Error saving data: %s" % error_string(error))
		return
	
	SceneManager.set_target_scene("res://scenes/levels/test/main_menu.tscn", true, true)
	SceneManager.change_scene()
