extends Node

@onready var ui: CanvasLayer = $UI
@onready var cursor: Node2D = $UI/Crosshair
@onready var fps_value: Label = %FPSMeter

func _ready():
	ObjectPoolService.default_parent = Levels.instance.get_node("%PooledNodes")
	if GameSaveService.has_prepared():
		GameSaveService.load_prepared()
	else:
		var player := EntityManager.new_entity(EntityManager.TYPE.PLAYER, "player")
		player.global_position = Vector2(500,300)
		Levels.instance.add_child(player)
	
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)
	
func _physics_process(delta):
	time_manager(delta)

func _process(_delta):
	fps_value.text = str(Engine.get_frames_per_second())

func crosshair_physics():
	cursor.global_position = cursor.get_global_mouse_position()
	cursor.scale = Vector2(0.2, 0.2) / (CAV.viewport_container_node.scale)
	
func _input(event):
	if event.is_action_pressed("Terminal") and Timemode.current_time_mode == Timemode.TIME_MODE.NORMAL and !Player.player_node.is_on_floor():
		Timemode.current_time_mode = Timemode.TIME_MODE.SLOWMO
		
	if event.is_action_pressed("Pause") and Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Timemode.current_time_mode = Timemode.TIME_MODE.NORMAL

func time_manager(delta):
	if Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Engine.time_scale = lerp(Engine.time_scale, Timemode.engine_time, delta * 10)
	else:
		Engine.time_scale = Timemode.engine_time
		
func _on_save_button_pressed() -> void:
	var error := GameSaveService.save_to_file("test_save")
	if error != OK:
		push_error("Error saving data: %s" % error_string(error))
		return
	
	SceneManager.set_target_scene("res://scenes/levels/test/main_menu.tscn", true, true)
	SceneManager.change_scene()
