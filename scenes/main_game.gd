extends Node

var thread: Array[Thread]

@onready var ui: CanvasLayer = $UI
@onready var cursor: Node2D = $UI/Crosshair
@onready var view_box: SubViewportContainer = $SubViewportContainer
@onready var sub_viewport: SubViewport = $SubViewportContainer/SubViewport
@onready var terminal: Control = $PlayerFloatingText/Terminal
@onready var screen_res: Vector2 = get_viewport().size as Vector2
@onready var floating_text_manager: FloatingPositionManager = FloatingPositionManager.new($FloatingText)
@onready var floating_player_manager: FloatingPositionManager
@onready var fps_value: Label = %FPSMeter

var shockwave_strong: PackedScene = preload("res://shaders/shockwave/shockwave_large.tscn")

const VIEWPORT_RESOLUTION: Vector2i = Vector2i(1024, 576)

func _ready():
	ObjectPoolService.default_parent = Playground.instance.get_node("%PooledNodes")
	if GameSaveService.has_prepared():
		GameSaveService.load_prepared()
	else:
		var player := EntityManager.new_entity(EntityManager.TYPE.PLAYER, "player")
		player.global_position = Vector2(500,300)
		Playground.instance.add_child(player)
	floating_player_manager = FloatingPositionManager.new($PlayerFloatingText, Player.player_node)
	
	Input.set_mouse_mode(Input.MOUSE_MODE_HIDDEN)
	
	CAV.viewport_container_node = view_box
	CAV.viewport_node = sub_viewport
	
	#################### Screen Size ########################
	
	sub_viewport.size = VIEWPORT_RESOLUTION
	view_box.size = VIEWPORT_RESOLUTION
	
	CAV.container_default_position = view_box.position
	CAV.container_default_size = sub_viewport.size as Vector2
	CAV.container_default_scaling = screen_res / CAV.container_default_size
	CAV.screen_resolution = screen_res
	
	view_box.scale = CAV.container_default_scaling
	
	ui.scale = view_box.scale
	terminal.close()
	
func _physics_process(delta):
	floating_text_manager.physics(delta)
	floating_player_manager.physics(delta)
	time_manager(delta)

func _process(_delta):
	fps_value.text = str(Engine.get_frames_per_second())

func crosshair_physics():
	cursor.global_position = view_box.get_global_mouse_position()
	cursor.scale = Vector2(0.2, 0.2) / (CAV.viewport_container_node.scale)
	
func _input(event):
	if event.is_action_pressed("Terminal") and Timemode.current_time_mode == Timemode.TIME_MODE.NORMAL and !Player.player_node.is_on_floor():
		Timemode.current_time_mode = Timemode.TIME_MODE.SLOWMO
		terminal.open()
		spawn_shockwave()
		
	if event.is_action_pressed("Pause") and Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Timemode.current_time_mode = Timemode.TIME_MODE.NORMAL
		terminal.close()

func time_manager(delta):
	if Timemode.current_time_mode == Timemode.TIME_MODE.SLOWMO:
		Engine.time_scale = lerp(Engine.time_scale, Timemode.engine_time, delta * 10)
		
	else:
		Engine.time_scale = Timemode.engine_time
		
func spawn_shockwave():
	var shockwave1: BackBufferCopy = shockwave_strong.instantiate()
	shockwave1.spawn(Player.player_node)
	
func _on_save_button_pressed() -> void:
	var error := GameSaveService.save_to_file("test_save")
	if error != OK:
		push_error("Error saving data: %s" % error_string(error))
		return
	get_tree().change_scene_to_file("res://scenes/main_menu.tscn")
